// An example of function composition.

function words(str) string_split(str);
function to_lower(words) map(string_downcase words);
function sort_words(words) sort(words string_is_lt);

function count_runs(words)
{ function iter(words, c)
    match(words)
        [] -> [],
        w:ws where is_empty(ws) -> [c:w],
        w1:w2:ws where w1 == w2 -> iter(w2:ws, c + 1),
        w1:w2:ws -> append([c:w1] iter(w2:ws, 1));
  iter(words, 1) };

function sort_runs(runs) sort(runs, fn(r1 r2) first(r1) > first(r2));

function common_words(n, str) compose(mapfn(fn(p) tail(p):head(p))
                                      fn(runs) take(n, runs)
                                      sort_runs, count_runs
                                      sort_words, to_lower
                                      words)(str);

// common_words(2, "to be or not to be");
// => ["to" : 2, "be" : 2]