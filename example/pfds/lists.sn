// Structure sharing operations on lists.
// (See chapter 2)
namespace lists;

function append(xs, ys)
 match (xs)
  [] -> ys,
  x:xs -> x:append(xs, ys);

function update(xs, i, y)
 if (is_negative(i))
  error("index cannot be negative")
 else match (xs:i:y)
       []:i:_ -> error("invalid index - " i),
       (_:xs):0:y -> y:xs,
       (x:xs):i:y -> x:update(xs, dec(i), y);

function suffixes(xs)
   match (xs)
    [] -> [],
    _:xs -> xs:suffixes(xs);

// binary trees represented using lists:
// binary_tree = value:left:right
// `value` can be of any type for which the methods `<` and `>`
// have been implemented.

function tree_value(tree, default = false)
 match (tree)
  [] -> default,
  v:_:_ -> v;

function tree_left(tree)
 match (tree)
  [] -> [],
  _:l:_ -> l;

function tree_right(tree)
 match (tree)
  [] -> [],
  _:_:r -> r;
  
function is_tree_member(x, tree)
 match (tree)
  [] -> false,
  v:l:_ where x < v -> is_tree_member(x, l),
  v:_:r where x > v -> is_tree_member(x, r),
  _ -> true;
  
namespace;


  