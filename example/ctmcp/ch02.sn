// Exception example

function eval(e)
  if (is_number(e)) e
  else match(e)
        [!plus x y] -> eval(x) + eval(y),
        [!times x y] -> eval(x) * eval(y),
        _ -> raise(ill-formed-expression, e);

assert eval(10) == 10;
assert eval([!plus 10 20]) == 30;
assert eval([!times [!plus 10 20] [!plus 1 2]]) == 90;
assert try eval("hi") catch (e) !no == !no;

// Ex 8
// Control abstractions
macro and_then(e1, e2)
 %if (%%e1) %%e2 else false;

macro or_else(e1, e2)
 %if (%%e1) true else %%e2;

let x = 1;
assert and_then(true, {x = 2; 10}) == 10;
assert x == 2;
assert and_then(2 > 3, {x = 1; 10}) == false;
assert x == 2;

x = 1;
assert or_else(true, {x = 2; 10}) == true;
assert x == 1;
assert or_else(2 > 3, {x = 2; 10}) == 10;
assert x == 2;
