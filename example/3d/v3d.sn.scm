(begin (define-structure v3d x y z) (define v3d_set_z v3d-z-set!) (define v3d_z v3d-z) (define v3d_set_y v3d-y-set!) (define v3d_y v3d-y) (define v3d_set_x v3d-x-set!) (define v3d_x v3d-x) (define is_v3d v3d?) (define v3d (lambda (#!key (x 0.) (y 0.) (z 0.)) (make-v3d x y z))))
(define v3d_add (lambda (v1 v2) (v3d x: (+ (v3d_x v1) (v3d_x v2)) y: (+ (v3d_y v1) (v3d_y v2)) z: (+ (v3d_z v1) (v3d_z v2)))))
(define v3d_sub (lambda (v1 v2) (v3d x: (- (v3d_x v1) (v3d_x v2)) y: (- (v3d_y v1) (v3d_y v2)) z: (- (v3d_z v1) (v3d_z v2)))))
(define v3d_mult_real (lambda (v1 r) (v3d x: (* (v3d_x v1) r) y: (* (v3d_y v1) r) z: (* (v3d_z v1) r))))
(define v3d_div_real (lambda (v1 r) (v3d x: (/ (v3d_x v1) r) y: (/ (v3d_y v1) r) z: (/ (v3d_z v1) r))))
(define v3d_length (lambda (v) (expt (+ (+ (v3d_x v) (v3d_y v)) (v3d_z v)) (/ 1 2))))
(define v3d_length2 (lambda (v) (expt (v3d_length v) 2)))
(define v3d_dot_product (lambda (v1 v2) (add (* (v3d_x v1) (v3d_x v2)) (* (v3d_y v1) (v3d_y v2)) (* (v3d_z v1) (v3d_z v2)))))
(define v3d_cross_product (lambda (v1 v2) (v3d x: (- (* (v3d_y v1) (v3d_z v2)) (* (v3d_z v1) (v3d_y v2))) y: (- (* (v3d_z v1) (v3d_x v2)) (* (v3d_x v1) (v3d_z v2))) z: (- (* (v3d_x v1) (v3d_y v2)) (* (v3d_y v1) (v3d_x v2))))))
(define v3d_neg (lambda (v) (v3d x: (sub (v3d_x v)) y: (sub (v3d_y v)) z: (sub (v3d_z v)))))
(define v3d_print (lambda (v) (print "[" (v3d_x v) ", " (v3d_y v) ", " (v3d_z v) "]")))
(define v3d_println (lambda (v) (begin (v3d_print v) (println))))
