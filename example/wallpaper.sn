// Image output in PPM format.
record image(width height pixels);

function mkimage(width height) 
    image(width = width, height = height, pixels = []);

function image_put_pixel(img r g b)
    image_set_pixels(img, append(image_pixels(img), [#b[r g b]]));

function bit_to_n(ba i) 
    if (bit_array_is_set(ba, i)) 1
    else 0;

function image_show(img) 
    let (s = string_writer(), width = image_width(img)) {
	show(stream = s, "P3\n", image_width(img), " ", image_height(img) " 1\n");
	let loop (pixels = image_pixels(img), w = width) 
	    if (is_empty(pixels)) get_output_string(s)
	    else let (pixel = first(pixels)) {
		show(stream = s, bit_to_n(pixel, 0), " "
		     bit_to_n(pixel, 1), " ",
		     bit_to_n(pixel, 2), " ");
		if (is_zero(w - 1)) {
		    newline(s);
		    loop(tail(pixels), width)
		} else {
		    show(stream = s, " ");
		    loop(tail(pixels), dec(w))
		}
	    }
    };


// Demonstrates image generation using list-comprehension.

function wallpaper(corna, cornb, side)
    let (r = range(1, 100))
    let (img = mkimage(100, 100)) {
    [[letseq (x = 10 + i * side/100, 
              y = 10 + j * side/100, 
              c = truncate(x * x + y * y))
      if (is_even(c))
          image_put_pixel(img, i j 1) 
	  else 
	      image_put_pixel(img, 0 0 0)
                  | 
                  j <- r] 
     | i <- r];
    image_show(img)
        };

// Usage:
/*
  let f = file_writer("wallpaper.ppm");
  show(stream = f, wallpaper(9, 5, 5));
  close_stream(f);
*/
