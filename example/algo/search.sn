function binary_search_st(capacity)
  let (keys = make_array(capacity),
       values = make_array(capacity),
       n = 0)
  { function get(key)
      if (n == 0) false
      else let (i = rank(key, 0, n))
        if (i < n && keys[i] == key) vals[i]
        else false

    function put(key, val)
      let (i = rank(key, 0, n))
        if (i < n && keys[i] == key) vals[i] = val
        else
        { letfn loop (j = n)
            when (j < i)
            { keys[j] = keys[j-1]
              vals[j] = vals[j-1]
              loop(j-1) }
          keys[i] = key; vals[i] = val
          n = n+1 }

     function delete(key) key
     
     function rank(key, lo, hi)
       if (hi < lo) lo
       else let (mid = quotient(lo + (hi-lo), 2),
                    cmp = {showln(key, ", ", mid, ", ", keys[mid]); compare(key, keys[mid])})
         if (cmp < 0) rank(key, lo, mid-1)
         else if (cmp > 0) rank(key, mid+1, hi)
         else mid
         
    ^(message)
    | 'size -> n
    | 'get -> get
    | 'put -> put
    | 'delete -> delete }
    