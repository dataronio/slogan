// 99 problems (based on https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems)

// A utility macro for testing.
macro assert(expr result) 
    let (r = expr) 
	if (not(r == result)) 
	    error("assert failed." %expr "->" r);

// PART 1. Lists

// 1. Find the last element of a list.

function my_last(xs) 
    match(xs) 
        [] -> [],
	[x] -> x,
	_ : xs -> my_last(xs);

assert(my_last([1 2 3]) 3);
assert(my_last(%[a b c d]) !d);

// 2. Find the last but one element of a list. 

function my_but_last(xs)
    match(xs)
	[] -> [],
	[x y] -> x,
	_ : xs -> my_but_last(xs);

assert(my_but_last([1 2 3 4]) 3);
assert(my_but_last(range(1 100)) 99);

// 3. Find the K'th element of a list. The first element in the list is number 1. 

function element_at(k xs) nth(dec(k) xs);

assert(element_at(3 %[a b c d]) !c);

// 4. Find the number of elements of a list. 

function my_length(xs) 
    match(xs) 
	[] -> 0,
	_ : xs -> inc(my_length(xs));

assert(my_length([123 456 789]) 3);
assert(my_length(string_to_list("hello")) 5);

// 5. Reverse a list. 

function my_reverse(xs) 
    fold_left(fn(a b) b : a
	      []
	      xs);

assert(my_reverse([1 2 3 4 5]) [5 4 3 2 1]);
assert(list_to_string(my_reverse(string_to_list("olleh"))) "hello");