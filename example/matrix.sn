// Demonstrates the overloading of `*` function for matrix multiplication.

namespace matrix;

function is_matrix(x)
 and(is_array(x), array_length(x) > 0,
     is_array(array_at(x 0)));

function make(x) when (is_matrix(x)) x;

function row_count(m) array_length(m);

function column_count(m) array_length(array_at(m, 0));

function at(m, i, j) array_at(m, [i j]);

function set(m, i, j x) array_set(m, [i j], x);

function mul_by_scalar(m, s)
 let (cols = column_count(m)
      rows = row_count(m)
      mul = fn(i, j) array_set(m [i j] s * array_at(m [i j])))
  { do_times(rows fn(i, _, _) do_times(cols, fn(j, _, _) mul(i j)));
    m };

function dot_product(xs ys) fold_left(`+` 0 map(`*` xs ys));

function extract_rows(m)
 reverse(do_times(column_count(m)
         fn(i, r, _)
          reverse(do_times(row_count(m) fn(j, r, _) at(m, j, i):r, init=[])):r,
         init=[]));

function mul_by_matrix(m1, m2)
 let (m1_cols = column_count(m1)
      m2_rows = row_count(m2))
   when (m1_cols == m2_rows)
    letseq (rows = extract_rows(m2), m1_rows = row_count(m1)
            mf = fn(i, r _)
                 { array_set(r, i, (map(fn(r) dot_product(array_to_list(array_at(m1 i)), r) rows)));
                   r })
     do_times(m1_rows mf init = make_array(m1_rows));
 
namespace;

import (is_matrix) from matrix;

method `*`(a:number b:matrix) matrix_mul_by_scalar(b a);
method `*`(a:matrix b:number) matrix_mul_by_scalar(a b);
method `*`(a:matrix b:matrix) matrix_mul_by_matrix(a b);

// tests
import matrix as m;

let m = m_make(#[#[1 2 3] #[4 5 6]]);
assert m_is_matrix(m);
assert m_row_count(m) == 2;
assert m_column_count(m) == 3;
assert m_at(m, 0, 1) == 2;
m_set(m, 0, 1, 10);
assert m_at(m, 0, 1) == 10;
m_mul_by_scalar(m, 10);
assert m_at(m, 0, 0) == 10;
assert m_at(m, 1, 2) == 60;
assert m_at(m, 1, 1) == 50;
let m1 = #[#[1 2 3] #[4 5 6]];
let m2 = #[#[1 2 3 4] #[2 3 4 5] #[3 4 5 6]];
assert m_mul_by_matrix(m1 m2) == #[[14, 20, 26, 32], [32, 47, 62, 77]];

assert m_mul(10, 20) == 200;
assert m_mul(10, #[#[1 2 3] #[4 5 6]]) == #[#[10 20 30] #[40 50 60]];
assert m_mul(#[#[1 2 3] #[4 5 6]], 10) == #[#[10 20 30] #[40 50 60]];
assert m_mul(m1 m2) == #[[14, 20, 26, 32], [32, 47, 62, 77]];

assert 10 * 20 == 200;
assert 10 * #[#[1 2 3] #[4 5 6]] == #[#[10 20 30] #[40 50 60]];
assert #[#[1 2 3] #[4 5 6]] * 10 == #[#[10 20 30] #[40 50 60]];
assert m1 * m2 == #[[14, 20, 26, 32], [32, 47, 62, 77]];
