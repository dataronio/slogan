reload("objects")

module plg(load_object)
{ function read_lines(file_name)
    call_with_stream(file_reader(file_name),
      ^(s) read_all(s, read_line))

  function is_comment(line)
    let (s = string_ltrim(line))
      or(string_length(s) == 0,
         string_starts_with(s, ";"),
         string_starts_with(s, "#"))

  let is_not_comment = complement(is_comment)
  
  function filter_comments(lines)
    filter(is_not_comment, lines)

  record plg(name, vertices, polygons)

  function parse_part(contents, num, parser)
    let loop (contents = contents, i = 0, r = [])
      if (i < num)
        loop(tail(contents), i+1, parser(head(contents)):r)
      else reverse(r):contents

  function parse_vertex(v)
    let (r = map(string_to_number, string_split(v)))
      if (length(r) <> 3) error("Invalid vertex definition", r)
      else r
      
  function parse_polygon(v) map(string_to_number, string_split(v))
  
  function parse_vertices(contents, num)
    parse_part(contents, num, parse_vertex)

  function parse_polygons(contents, num)
    parse_part(contents, num, parse_polygon)

  function parse_contents(contents, num_vertices,
                          num_polygons, result)
    letseq (pv = parse_vertices(contents, num_vertices)
            pp = parse_polygons(tail(pv), num_polygons))
    { plg_set_vertices(result, head(pv))
      plg_set_polygons(result, head(pp))
      result }

  function parse_header(contents)
    let (parts = string_split(contents))
     append([first(parts)], map(string_to_number, rest(parts)))
      
  function read(file_name)
    letseq (contents = filter_comments(read_lines(file_name))
            result = make_plg(false, false, false))
      match(parse_header(first(contents)))
        [name, num_vertices, num_polygons] ->
        { plg_set_name(result, name);
          parse_contents(rest(contents), num_vertices,
                         num_polygons, result) }

  let id_number = 0

function list_to_points(ps)
  map(^(p) point_3d(x = first(p), y = second(p), z = third(p)), ps)

function list_to_polygons(ps, obj)
    map(^(p)
        let (color_des = first(p), vs = rest(rest(p)))
          polygon(color = band(color_des, 0x00ff),
                  shading = bshift(color_des, -12),
                  is_two_sided = false,
                  is_visible = true,
                  is_clipped = false,
                  is_active = true,
                  vertices = vs,
                  normal_length =
                  letseq (v0 = first(vs),
                          v1 = second(vs),
                          v2 = third(vs),
                          vl = object_vertices_local(obj),
                          u = make_vector_3d(nth(v0, vl), nth(v1, vl)),
                          v = make_vector_3d(nth(v0, vl), nth(v2, vl)),
                          normal = cross_product_3d(u, v))
                          vector_mag_3d(normal)),
        ps)

  function compute_object_radius(obj)
  { object_set_radius(obj, 0)
    let loop (new_radius = 0, vertices = object_vertices_local(obj))
      when (vertices)
        letseq (v = first(vertices),
                x = point_3d_x(v),
                y = point_3d_y(v),
                z = point_3d_z(v))
          loop (let (nr = sqrt(x*x + y*y + z*z))
                { when (nr > object_radius(obj))
                    object_set_radius(obj, nr)
                  nr }, rest(vertices)) }
  
  function plg_to_object(plg)
    let (obj = object(id = {id_number = id_number+1; id_number},
                      world_pos = point_3d(x = 0, y = 0, z = 0),
                      vertices_local = list_to_points(plg_vertices(plg)),
                      vertices_world = false,
                      vertices_camera = false,
                      polys = false,
                      radius = false,
                      state = false))
     { object_set_polys(obj, list_to_polygons(plg_polygons(plg), obj))
       compute_object_radius(obj)
       obj }
       
  function load_object(file_name)
    plg_to_object(read(file_name))
}
