// A continuations-passing scheme interpreter.

function evaluate(e r k) 
    if (is_atom(e))
        if (is_symbol(e)) evaluate_variable(e r k)
        else evaluate_quote(e r k)
    else case (first(e)) 
          quote -> evaluate_quote(cadr(e) r k),
          `if` -> evaluate_if(cadr(e) caddr(e) cadddr(e) r k),
          begin -> evaluate_begin(cdr(e) r k),
          `set!` -> evaluate_set(cadr(e) caddr(e) r k),
          lambda -> evaluate_lambda(cadr(e) cddr(e) r k),
          else -> evaluate_application(car(e) cdr(e) r k);

declare generic invoke(f v r k);
declare generic resume(k v);
declare generic lookup(r n k);
declare generic update(r n k v);

function evaluate_quote(v r k) resume(k v);

record if_cont(k et ef r);

method resume(if_cont _)(k v) 
    evaluate(if (v) if_cont_et(k) else if_cont_ef(k)
             if_cont_r(k)
             if_cont_k(k));


        
