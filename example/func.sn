var shift_left = function (lst)
    if is_empty (lst) [0]
    else [head (lst) shift_left (tail (lst))];

var shift_right = function (lst) [0 lst];

var add_list = function (lst1, lst2) map (add, lst1, lst2);

// Generates Pascal's triangle
var pascal = function (n)
    if n == 1 [1]
    else let m = pascal (n - 1)
         add_list (shift_left (m), shift_right (m));

// lazy integer stream.
var int_stream = function (n) [n delay (int_stream (n + 1))];

var ints = function (i)
    if is_integer (i) int_stream (i)
    else force (tail (int_stream (head (i))));

println(head (ints (ints (ints (10))))); // => 12

var pascal_stream = function (row)
    [row delay (pascal_stream (add_list (shift_left (row), shift_right (row))))];

println (force (tail (force (tail (force (tail (pascal_stream ([1])))))))); // => [[1, 3, 3, 1] #<promise #...>]

// function as object

var counter = let c = 0
              function () { c = c + 1; c };

println (counter ()); // => 1
println (counter ()); // => 2

// function as an "object factory" or a "class".

var make_counter = function (n)
    let c = n
    function (msg)
        case msg {
            !bump: { c = c + 1 }
            !read: c
            else: error ("invalid message. ", msg)
        };

var c1 = make_counter (1);
var c5 = make_counter (5);
c1.bump;
c1.bump;
println (c1.read); // => 3
c5.bump;
println (c5.read); // => 6

