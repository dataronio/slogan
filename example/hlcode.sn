// Emits HTML that has syntax-highlighting for Slogan source code.
    
function add_span_class(token, classname, convfn) 
    string_append("<span class=\"", classname, "\">", convfn(token), "</span>");

function identity(token) token;

function token_to_html(token)
    if (is_keyword_token(token)) add_span_class(token, "k", symbol_to_string)
    else if (is_number(token)) add_span_class(token, "mi", number_to_string)
    else if (is_special_token(token)) add_span_class(token, "o", special_token_to_string)
    else if (is_string(token)) add_span_class(token, "s1", identity)
    else token;

function hlcode_loop(tokenizer, out_str) 
    let (token = get_token(tokenizer)) 
        if (not(is_eof_object(token))) {
            show(stream = out_str, token_to_html(token));
            show(stream = out_str, " ");
            hlcode_loop(tokenizer, out_str)
        };

function hlcode(program, @optional with_prompt = true)
    let (p = string_reader(program))
    let (t = stream_tokenizer(false, p))
    let (s = string_writer()) {
        hlcode_loop(t, s);
        let (s = get_output_string(s)) 
          if (with_prompt) string_append("<span class=\"nc\">slogan&gt; </span>", s)
          else s
    };

function hlvalue(program)
  let (p = string_reader(program))
  let (t = stream_tokenizer(false, p))
  let (v = eval(slogan(t)))
  let (o = string_writer())
   { show(stream = o, "<span class=\"ge\">=&gt; ", v, "</span>");
     get_output_string(o) };

function show_hlcode(program, @optional with_prompt = true) {
    display(hlcode(program, with_prompt));
    newline();
    display(hlvalue(program));
    newline()
};
