// Ref: Section 5.7 of "The C Programming Language" (page92)

var day_table = #[ #[0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
                   #[0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] ];
var is_leap = function (year) { 
    and (is_zero (remainder (year, 4)),
         or (not (is_zero (remainder (year, 100))),
             is_zero (remainder (year, 400))))
};

var day_of_year = function (year, month, day) {
    array_reduce (array_at (day_table, if is_leap (year) 1 else 0),
                  add, start = 1, end = month, 
                  initial_value = day)
};

var month_day = function (year, yday) {
    letrec loop = function (month, yday, mdays) { 
        let days_in_month = array_at (mdays, month)
        if yday > days_in_month loop (month + 1, yday - days_in_month, mdays)
        else [month yday]
    }
    loop (1, yday, array_at (day_table, if is_leap (year) 1 else 0))
};

var months = #[!JAN, !FEB, !MAR,
               !APR, !MAY, !JUN,
               !JUL, !AUG, !SEP,
               !OCT, !NOV, !DEC];

var parse_date = function (str_date) {
    let parts = string_split (str_date)
    if not (length (parts) == 3) {
        println ("Date should be in DD MON YYYY format.");
        false
    } else {
        let mon = array_index_of (months, string_to_symbol (at (parts, 1)))
        if mon == -1 {
            println ("Invalid month. ", at (parts, 1));
            false
        } else {
            let year = string_to_number (at (parts, 2)), month = mon + 1
            [validate_mday (month, year, string_to_number (at (parts, 0))),
             month,
             year]
        }
    }
};

var validate_mday = function (month, year, mday) {
    if (mday > 0 && mday <= (array_at (array_at (day_table, if is_leap (year) 1 else 0), month))) mday
    else false
};
