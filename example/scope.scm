(load (string-append *prelude-root* "/prelude/prelude.i.scm"))
(define x 100)
(println (let () (define x 10) (define y 20) (+ x y)))
(println (+ x (let () (define x 10) (define y 20) (+ x y))))
(println (let ((x 10) (y 20)) (let () (* x y))))
(define x (let ((x 9)) (let () (* x (let ((x (/ x 3))) (let () (+ x x)))))))
(println x)
(println (let* ((a 10) (b a)) (let () (+ a b))))
(println (letrec ((iseven? (lambda (n) (let () (if (equal? n 0) (let () #t) (let () (isodd? (- n 1))))))) (isodd? (lambda (n) (let () (if (equal? n 0) (let () #t) (let () (iseven? (- n 1)))))))) (let () (iseven? 88))))
(println ((lambda (x) (let () (+ x x))) (* 3 4)))
(println (let ((double (lambda (x) (let () (+ x x))))) (let () (list (double (* 3 4)) (double (/ 99 11)) (double (- 2 7))))))
(let ((doubleAny (lambda (f x) (let () (f x))))) (let () (println (doubleAny (lambda (x) (let () (+ x x))) 100)) #!void (println (doubleAny (lambda (x) (let () (pair x x))) 20)) #!void))
(println (let ((x "a")) (let () (let ((f (lambda (y) (let () (list x y))))) (let () (f "b"))))))
(println (let ((f (let ((x "sam")) (let () (lambda (y z) (let () (list x y z))))))) (let () (f "i" "am"))))
(println (let ((f (let ((x "sam")) (let () (lambda (y z) (let () (list x y z))))))) (let () (let ((x "not sam")) (let () (f "i" "am"))))))
(define xyz (list "x" "y" "z"))
(let () (define xyz (list "z" "y" "x")) (println xyz))
(println xyz)
(define doubler (lambda (f) (let () (lambda (x) (let () (f x x))))))
(define double (doubler (lambda (a b) (let () (+ a b)))))
(define doublePair (doubler pair))
(println (double 10))
(println (doublePair "hello"))
(let ((doubleAny (lambda (f x) (let () ((doubler f) x))))) (let () (println (doubleAny (lambda (a b) (let () (+ a b))) 100)) #!void))
(define abs (lambda (n) (let () (if (< n 0) (let () (- 0 n)) (let () n)))))
(println (abs 77))
(println (abs (- 77)))
(define reciprocal (lambda (n) (let () (and (not (equal? n 0)) (/ 1 n)))))
(println (reciprocal 3))
(println (reciprocal .5))
(println (reciprocal 0))
(define sign (lambda (n) (let () (if (< n 0) (let () (- 1)) (if (> n 0) (let () 1) (let () 0))))))
(println (sign (- 88.3)))
(println (sign 0))
(println (sign 333333333333))
(define incomeTax (lambda (income) (let () (if (<= income 10000) (let () (* income .05)) (if (<= income 20000) (let () (+ (* (- income 10000) .08) 500.)) (if (<= income 30000) (let () (+ (* (- income 20000) .13) 1300.)) (let () (+ (* (- income 30000) .21) 2600.))))))))
(println (incomeTax 5000))
(println (incomeTax 15000))
(println (incomeTax 25000))
(println (incomeTax 50000))
(define shorter (lambda (a b) (let () (if (< (length b) (length a)) (let () b) (let () a)))))
(println (shorter (list 1 2) (list 3 4 5)))
(println (shorter (list 1 2) (list 3 4)))
(println (shorter (list 1 2) (list 3)))
