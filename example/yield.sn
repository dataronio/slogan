function f()
{ yield 'a';
  yield 'b';
  yield 'c' };

define iter = f();
showln(first(iter)); // -> a
iter = rest(iter);
showln(first(iter)); // -> b
iter = rest(iter);
showln(first(iter)); // -> c

function count(start = 0, step = 1)
{ yield start;
  count(start + step, step) };

iter = count(10, 5);
showln(first(iter)); // -> 10
iter = rest(iter);
showln(first(iter)); // -> 15

function cycle(seq)
  let (saved = 
    let loop (seq = seq, saved = [])
     if (is_empty(seq)) reverse(saved)
     else { yield first(seq);
            loop(rest(seq), first(seq):saved) })
   let loop()
    let loop2(s = saved)
     if (is_empty(s)) loop()
     else { yield first(s);
            loop2(rest(s)) };

iter = cycle([1 2]);
showln(first(iter)); // -> 1
iter = rest(iter);
showln(first(iter)); // -> 2
iter = rest(iter);
showln(first(iter)); // -> 1
iter = rest(iter);
showln(first(iter)); // -> 2

