// binary tree with pattern matching

record leaf ();
var default_leaf = leaf ();
record tree (key, value, left = default_leaf, right = default_leaf);

function mk_tree (key, value, @optional left = default_leaf, right = default_leaf) {
    tree (key = key, value = value, left = left, right = right)
};

function tree_search (t, x) {
    match t {
        leaf (): !notfound
        tree (key, value, _, _) with x == key: value
        tree (key, _, left, _) with x < key: tree_search (left, x)
        tree (key, _, _, right) with x > key: tree_search (right, x)
    }
};

function tree_insert (t, k, v) {
    match t {
        leaf (): mk_tree (k, v)
        tree (key, _, left, right) with k == key: mk_tree (k, v, left, right)
        tree (key, value, left, right) with k < key: mk_tree (key, value, tree_insert (left, k, v), right)
        tree (key, value, left, right) with k > key: mk_tree (key, value, left, tree_insert (right, k, v))
    }
};

function tree_delete (t, k) {
    match t {
        leaf (): default_leaf
        tree (key, value, left, right) with key == k: {
            let r = remove_smallest (right)
            match r {
                !none: left
                [kp, vp, tp]: mk_tree (kp, vp, left, tp)
            }
        }
        tree (key, value, left, right) with k < key: mk_tree (key, value, tree_delete (left, k), right)
        tree (key, value, left, right) with k > key: mk_tree (key, value, left, tree_delete (right, k))
    }
};

function remove_smallest (t) {
    match t {
        leaf (): !none
        tree (key, value, left, right): {
            let r = remove_smallest (left)
            match r {
                !none: [key, value, right]
                [kp, vp, tp]: [kp, vp, mk_tree (key, value, tp, right)]
            }
        }
    }
};

// tree traversal

function dfs (t, fn) {
    match t {
        leaf (): default_leaf
        tree (key, value, left, right): {
            fn (key, value);
            dfs (left, fn);
            dfs (right, fn);
        }
    }
};

var left = tree (key = 0, value = "zero");
var right = tree (key = 2, value = "two");
var t = tree (key = 1, value = "one", left = left, right = right);

println (tree_search (t, 1)); // => "one"
println (tree_search (t, 0)); // => "zero"
println (tree_search (t, 2)); // => "two"
println (tree_search (t, 3)); // => notfound

t = tree_insert (t, 3, "three");
t = tree_insert (t, -1, "-one");

println ();
dfs (t, function (k, v) println (k, "#", v));
println ();

println (tree_search (t, 3)); // => "three"
println (tree_search (t, -1)); // => "-one"

println ("deleting two...");
t = tree_delete (t, 2);
println (tree_search (t, 1)); // => "one"
println (tree_search (t, 2)); // => notfound
println (tree_search (t, 3)); // => "three"
println (tree_search (t, -1)); // => "-one"