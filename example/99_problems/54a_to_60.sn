load "../util";

// Representing binary trees with a record:

record tree (left, right);

// 54a. (*) Check whether a given term represents a binary tree.
// Requires no solution. The predicate is_tree() is auto-generated.

assert(is_tree(tree(left = 1, right = tree(left = 2, right = 3))), true);
assert(is_tree([1 [2 3]]), false);

// 55. (**) Construct completely balanced binary trees

function quot_rem(a b) [quotient(a b) remainder(a b)];

function cbal_tree(n)
    if (n == 0) %[Empty]
    else match (quot_rem(n-1, 2))
        [q r] -> [[!Branch !x left right]
                  | i <- range(q, q + r)
                  left <- cbal_tree(i)
                  right <- cbal_tree(n - i - 1)];

// 56. (**) Symmetric binary trees
// Let us call a binary tree symmetric if you can draw a vertical line
// through the root node and then the right subtree is the mirror image of the left subtree.

function is_mirror(left, right)
    match (left : right) 
        tree(a, b) : tree(x, y) -> is_mirror(a, y) && is_mirror(b, x),
        tree(_, _) : _ -> false,
        _ : tree(_, _) -> false,
        _ : _ -> true;

function is_symmetric(t)
    match(t) 
        tree(l, r) -> is_mirror(l, r),
        _ -> true;

assert(is_symmetric(tree(left = 1, right = 2)), true);
assert(is_symmetric(tree(left = 1, right = tree(left = 100, right = 200))), false);
assert(is_symmetric(tree(left = tree(left = 1, right = 2), right = tree(left = 100, right = 200))), true);

//  57. (**) Binary search trees (dictionaries)


