link("../util");

// 21. (*) Insert an element at a given position into a list.

function insert_at(i e xs) 
    match(xs) 
        [] -> [],
        x : xs -> if (i == 1) e : x : insert_at(-1 e xs)
                  else x : insert_at(dec(i) e xs);

assert_eq(insert_at(2 !alfa %[a b c d])
       %[a, alfa, b, c, d]);

// 22. Create a list containing all integers within a given range.

function my_range(a b) 
    let loop(a = a,
             b = b,
             r = []) 
        if (a == b) reverse(b : r)
        else loop(inc(a)
                  b
                  a : r);

assert_eq(my_range(4 9)
       [4, 5, 6, 7, 8, 9]);

// using the built-in range funtion:
assert_eq(range(4 9)
       [4, 5, 6, 7, 8, 9]);

// 23. Extract a given number of randomly selected elements from a list.

function rnd_select(n xs) 
    let (len = length(xs)) 
        let loop(n = n, r = []) 
            if (is_zero(n)) reverse(r)
            else let (e = nth(random_integer(len) xs)) 
                     if (member(e r)) loop(n r) else loop(dec(n) e : r);

assert_eq(length(rnd_select(3 %[a b c d e f g h])), 3);

// 24. Lotto: Draw N different random numbers from the set 1..M.

function rnd_select_in_range(n end) rnd_select(n range(1 end));

assert_eq(length(rnd_select_in_range(6 49)) 6);

// 25. Generate a random permutation of the elements of a list.

function rnd_permu(xs) rnd_select(length(xs) xs);

assert_eq(length(rnd_permu(%[a b c d e f])) 6);

// 26. (**) Generate the combinations of K distinct objects chosen from the N elements of a list.

function combinations(k xs)
    match([k xs]) 
        [0 _] -> [[]],
        [_ []] -> [],
        [k x:xs] -> append(map(fn(y) x : y,
                               combinations(dec(k) xs))
                           combinations(k xs));

assert_eq(length(combinations(3 %[a b c d e f])), 20);
assert_eq(length(combinations(3 %[a b c d e f g h i j k l])), 220);

// 27. Group the elements of a set into disjoint subsets.

// a) In how many ways can a group of 9 people work in 3 disjoint subgroups of 2,
//    3 and 4 persons? Write a function that generates all the possibilities and returns them in a list.


// TODO


// 28. Sorting a list of lists according to length of sublists.

// a) We suppose that a list contains elements that are lists themselves.
//    The objective is to sort the elements of this list according to their length.
//    E.g. short lists first, longer lists later, or vice versa.

function lsort(xss) sort(xss, fn(xs ys) length(xs) < length(ys));

assert_eq(lsort(%[[a b c] [d e] [f g h] [d e] [i j k l] [m n] [o]])
       %[[o] [m n] [d e] [d e] [f g h] [a b c] [i j k l]]);

// b) Again, we suppose that a list contains elements that are lists themselves.
//    But this time the objective is to sort the elements of this list according to
//    their length frequency; i.e., in the default, where sorting is done ascendingly,
//    lists with rare lengths are placed first, others with a more frequent length come later.

function lfsort(xss) {
    function lenfreq(xslen xss) 
        match (xss) 
            [] -> 0,
            ys : yss -> if (length(ys) == xslen) 1 + lenfreq(xslen yss)
                        else lenfreq(xslen yss);

    sort(xss, fn(xs ys) lenfreq(length(xs) xss) < lenfreq(length(ys) xss))
};

assert_eq(lfsort(%[[a b c] [d e] [f g h] [d e] [i j k l] [m n] [o]])
       %[[o], [i, j, k, l], [f, g, h], [a, b, c], [m, n], [d, e], [d, e]]);

                         
