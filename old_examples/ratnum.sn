// The abstract rational number implementaion from SICP.

var add_rat = function (x, y) {
    make_rat (numer (x) * denom (y) + numer (y) * denom (x),
              denom (x) * denom (y))
};

var sub_rat = function (x, y) {
    make_rat (numer (x) * denom (y) - numer (y) * denom (x),
              denom (x) * denom (y))
};

var mul_rat = function (x, y) {
    make_rat (numer (x) * numer (y), denom (x) * denom (y))
};

var div_rat = function (x, y) {
    make_rat (numer (x) * denom (y), denom (x) * numer (y))
};

var is_rat_equal = function (x, y) {
    numer (x) * denom (y) == numer (y) * denom (x)
};

var print_rat = function (x) {
    println (numer (x), "/", denom (x))
};

// Representation using pairs, which are in turn represented by closures.

var make_pair = function (x, y) {
    let dispatch = function (msg) {
        case msg {
           0: x
           1: y
        }
    } in dispatch
};

var pair_head = function (p) p (0);
var pair_tail = function (p) p (1);

var make_rat = function (n, d) {
    let g = gcd (n, d) in make_pair (n/g, d/g)
};
var numer = function (x) pair_head (x);
var denom = function (x) pair_tail (x);

// test
var one_half = make_rat (1, 2);
print_rat (one_half); // => 1/2

var one_third = make_rat (1, 3);
print_rat (add_rat (one_half, one_third)); // => 5/6
print_rat (mul_rat (one_half, one_third)); // => 1/6
print_rat (add_rat (one_third, one_third)); // => 2/3
