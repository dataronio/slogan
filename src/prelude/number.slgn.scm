;; Copyright (c) 2013-2014 by Vijay Mathew Pandyalakal, All Rights Reserved.

(define is_number number?)
(define is_integer integer?)
(define is_real real?)
(define is_rational rational?)
(define is_complex complex?)
(define is_zero zero?)
(define is_even even?)
(define is_odd odd?)
(define is_positive positive?)
(define is_negative negative?)

(define integer_to_char integer->char)
(define exact_to_inexact exact->inexact)
(define inexact_to_exact inexact->exact)
(define number_to_string number->string)

(define (real_to_integer n)
  (inexact->exact (round n)))

(define (integer_to_real n)
  (exact->inexact n))

(define real_part real-part)
(define imag_part imag-part)

(define add +)
(define sub -)
(define mult *)
(define div /)

(define arithmetic_shift arithmetic-shift)
(define bitwise_merge bitwise-merge)
(define bitwise_and bitwise-and)
(define bitwise_ior bitwise-ior)
(define bitwise_xor bitwise-xor)
(define bitwise_not bitwise-not)
(define bit_count bit-count)
(define integer_length integer-length)
(define is_bit_set bit-set?)
(define is_any_bits_set any-bits-set?)
(define is_all_bits_set all-bits-set?)
(define first_bit_set first-bit-set)
(define extract_bit_field extract-bit-field)
(define is_bit_field_set test-bit-field?)
(define clear_bit_field clear-bit-field)
(define replace_bit_field replace-bit-field)
(define copy_bit_field copy-bit-field)

(define is_number_eq =)
(define is_number_lt <)
(define is_number_gt >)
(define is_number_lteq <=)
(define is_number_gteq >=)

(define (random n)
  (if (integer? n)
      (random-integer n)
      (random-real)))
