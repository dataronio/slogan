(define (atomic-literal? pattern)
  (or (slgn-symbol? pattern)
      (and (list? pattern) (> (length pattern) 0) (eq? (car pattern) 'quote))
      (string? pattern)
      (number? pattern)
      (char? pattern)))

(define (match-pattern pattern value consequent tokenizer)
  (if (and (null? pattern) (null? value))
      consequent)
  (cond ((symbol? pattern)
         (if (slgn-symbol? pattern)
             (match-literal pattern value consequent)
             (match-identifier pattern value consequent)))
        ((atomic-literal? pattern)
         (match-literal pattern value consequent))
        ((list? pattern)
         `((and (list? ,value) (= (length ,pattern) (length ,value)))
           (cond ,(match-pattern (cdr pattern) (cdr value) consequent tokenizer))))
        (else (parser-error tokenizer pattern "Invalid pattern"))))

(define (match-identifier pattern value body)
  `(#t (let ((,pattern ,value))
         ,body)))

(define (match-literal pattern value body)
  `((equal? ,pattern ,value)
    ,body))