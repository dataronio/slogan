;; Copyright (c) 2013-2014 by Vijay Mathew Pandyalakal, All Rights Reserved.

(define (make-array dim fill constructor)
  (cond ((integer? dim)
         (constructor dim fill))
        ((list? dim)
         (if (null? (cdr dim))
             (make-array (car dim) fill constructor)
             (make-array (car dim) (make-array (cdr dim) fill constructor) constructor)))
        (else (error "invalid array dimension. " dim))))

(define (array dim #!key fill) (make-array dim fill make-vector))

(define is_array vector?)

(define array_length vector-length)
(define array_at vector-ref)
(define array_set vector-set!)
(define array_to_list vector->list)
(define array_copy vector-copy)
(define subarray subvector)
(define array_append vector-append)
(define subarray_fill subvector-fill!)
(define subarray_move subvector-move!)
(define array_shrink vector-shrink!)

(define (array_sort arr #!key (test <) (type 'quick))
  (let ((s (sort (vector->list arr) test: test type: type))
        (len (vector-length arr)))
    (let loop ((s s)
               (i 0))
      (if (null? s)
          arr
          (begin (vector-set! arr i (car s))
                 (loop (cdr s) (+ i 1)))))))
    
(define (array_map func arr)
  (let ((end (vector-length arr)))
    (let ((result (make-vector end)))
      (let loop ((i 0))
        (cond ((< i end)
               (vector-set! result i (func (vector-ref arr i)))
               (loop (+ i 1)))
              (else result))))))

(define (array_for_each func arr)
  (let ((end (vector-length arr)))
    (let loop ((i 0))
      (if (< i end)
          (begin (func (vector-ref arr i))
                 (loop (+ i 1)))))))

(define (array_reduce arr func #!key initial_value)
  (let ((end (vector-length arr))
        (start 0))
    (let loop ((i (if (not initial_value) (+ start 1) start))
               (result (if (not initial_value) (vector-ref arr start) initial_value)))
      (if (< i end)
          (loop (+ i 1)
                (func result (vector-ref arr i)))
          result))))

(define (array_index_of arr obj #!key (test *default-eq*))
  (let ((len (vector-length arr)))
    (let loop ((i 0))
      (cond ((>= i len)
             -1)
            ((test (vector-ref arr i) obj)
             i)
            (else (loop (+ i 1)))))))

;; byte arrays.

(define (byte_array dim #!key (fill 0)) (make-u8vector dim fill))
(define is_byte_array u8vector?)
(define byte_array_length u8vector-length)
(define byte_array_at u8vector-ref)
(define byte_array_set u8vector-set!)
(define byte_array_to_list u8vector->list)
(define list_to_byte_array list->u8vector)
(define byte_array_fill u8vector-fill!)
(define byte_subarray_fill subu8vector-fill!)
(define byte_array_append u8vector-append)
(define byte_array_copy u8vector-copy)
(define byte_subarray subu8vector)
(define byte_subarray_move subu8vector-move!)
(define byte_array_shrink u8vector-shrink!)
