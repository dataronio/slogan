;; Copyright (c) 2013-2014 by Vijay Mathew Pandyalakal, All Rights Reserved.

(define (make-array dim fill constructor)
  (cond ((integer? dim)
         (if (procedure? fill)
             (let loop ((a (constructor dim))
                        (i 0))
               (cond ((< i dim)
                      (vector-set! a i (fill))
                      (loop a (+ i 1)))
                     (else a)))
             (constructor dim fill)))
        ((list? dim)
         (if (null? (cdr dim))
             (make-array (car dim) fill constructor)
             (make-array (car dim) (lambda () (make-array (cdr dim) fill constructor)) constructor)))
        (else (error "invalid array dimension. " dim))))

(define array vector)
(define (make_array dim #!optional fill) (make-array dim fill make-vector))

(define is_array vector?)

(define array_length vector-length)
(define array_at vector-ref)
(define arrays_at vectors-ref)
(define array_set vector-set!)
(define array_to_list vector->list)
(define array_copy vector-copy)
(define subarray subvector)
(define array_append vector-append)
(define array_fill vector-fill!)
(define subarray_fill subvector-fill!)
(define subarray_move subvector-move!)
(define array_shrink vector-shrink!)

(define (array_sort arr #!key (test <) (type 'quick))
  (let ((s (sort (vector->list arr) test: test type: type))
        (len (vector-length arr)))
    (let loop ((s s) (i 0))
      (if (null? s) arr
          (begin (vector-set! arr i (car s))
                 (loop (cdr s) (+ i 1)))))))
    
(define (vectors-ref vectors i)
  (map (lambda (v) (vector-ref v i)) vectors))

(define (vector-map f vec . vectors)
  (if (not (null? vectors))
      (assert-equal-lengths vec vectors vector-length))
  (let ((len (vector-length vec)))
    (if (null? vectors)
        (generic-map1! f (make-vector len) vec len vector-ref vector-set!)
        (generic-map2+! f (make-vector len) (cons vec vectors) len vectors-ref vector-set!))))

(define (vector-for-each f vec . vectors)
  (if (not (null? vectors))
      (assert-equal-lengths vec vectors vector-length))
  (let ((len (vector-length vec)))
    (if (null? vectors)
        (generic-map1! f #f vec len vector-ref vector-set!)
        (generic-map2+! f #f (cons vec vectors) len vectors-ref vector-set!))))

(define array_map vector-map)
(define array_for_each vector-for-each)

(define (array_index_of arr obj #!key (test *default-eq*))
  (let ((len (vector-length arr)))
    (let loop ((i 0))
      (cond ((>= i len) -1)
            ((test (vector-ref arr i) obj) i)
            (else (loop (+ i 1)))))))

;; byte arrays.

(define byte_array u8vector)
(define (make_byte_array dim #!optional (fill 0)) (make-u8vector dim fill))
(define is_byte_array u8vector?)
(define byte_array_length u8vector-length)
(define byte_array_at u8vector-ref)
(define byte_array_set u8vector-set!)
(define byte_array_to_list u8vector->list)
(define list_to_byte_array list->u8vector)
(define byte_array_fill u8vector-fill!)
(define byte_subarray_fill subu8vector-fill!)
(define byte_array_append u8vector-append)
(define byte_array_copy u8vector-copy)
(define byte_subarray subu8vector)
(define byte_subarray_move subu8vector-move!)
(define byte_array_shrink u8vector-shrink!)

(define sbyte_array s8vector)
(define (make_sbyte_array dim #!optional (fill 0)) (make-s8vector dim fill))
(define is_sbyte_array s8vector?)
(define sbyte_array_length s8vector-length)
(define sbyte_array_at s8vector-ref)
(define sbyte_array_set s8vector-set!)
(define sbyte_array_to_list s8vector->list)
(define list_to_sbyte_array list->s8vector)
(define sbyte_array_fill s8vector-fill!)
(define ubyte_subarray_fill subs8vector-fill!)
(define sbyte_array_append s8vector-append)
(define sbyte_array_copy s8vector-copy)
(define ubyte_subarray subs8vector)
(define ubyte_subarray_move subs8vector-move!)
(define sbyte_array_shrink s8vector-shrink!)
