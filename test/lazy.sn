// A lazy bounded buffer:
function buffer(in, n) 
    letrec (end = nth_tail(n, in),
            loop = fn(in, end) 
                     match(in) 
                       i : in2 -> i :: loop(in2, nth_tail(1, end)))
      loop(in, end);

function ints(n) {
    task_sleep(.1);
    n :: ints(n + 1)
};

define in = ints(1);
define out = buffer(in, 5);
assert nth(10, out) == 11;

// Lazy list functions:

function lappend(xs, ys) 
    match(xs) 
        [] -> ys,
        x:xs -> x::lappend(xs, ys);

define x = lappend([1 2 3] [4 5 6]);
assert nth(2, x) == 3;
assert nth(4, x) == 5;

function lmap(xs, f) 
    match(xs) 
        [] -> [],
        x:xs -> f(x)::lmap(xs, f);

x = lmap([1 2 3 4 5], fn(x) x * 10);
assert nth(3, x) == 40;

function lflatten(xs) {
    function lflattend(xs, ys) 
        match(xs) 
            [] -> ys,
            x:xr -> lflattend(x, lflattend(xr, ys)),
            x -> x :: ys;
    lflattend(xs, [])
};

x = lflatten([1 2 [3 4]]);
assert nth(1, x) == 2;
assert nth(2, x) == 3;

function lfilter(xs, f) 
    match(xs) 
        [] -> [],
        x:xr -> if (f(x)) x :: lfilter(xr, f)
                else lfilter(xr, f);

x = lfilter([1 2 3 4 5], is_odd);
assert nth(1, x) == 3;
assert nth(2, x) == 5;
