// issue #38 - `@` to work with strings and all kinds of arrays.
function @tests(a, real = false)
{ assert @(a, 1) == if (real) 2. else 2;
  assert @(a, 10, default = 100) == 100;
  @(a, 1, value = if (real) 100. else 100);
  assert @(a, 1) == if (real) 100. else 100 };
  
@tests(#[1 2 3 4 5]);
@tests(#u8[1 2 3 4 5]);
@tests(#s8[1 2 3 4 5]);
@tests(#u16[1 2 3 4 5]);
@tests(#s16[1 2 3 4 5]);
@tests(#u32[1 2 3 4 5]);
@tests(#s32[1 2 3 4 5]);
@tests(#u64[1 2 3 4 5]);
@tests(#s64[1 2 3 4 5]);

@tests(#f32[1. 2. 3. 4. 5.], true);
@tests(#f64[1. 2. 3. 4. 5.], true);

let ba = #b[0 1 1 0 1];
assert @(ba, 0) == false;
assert @(ba, 1);
assert @(ba, 10, default = 100) == 100;
@(ba, 3, value = 100);
assert @(ba, 3);

let s = apply(string, string_to_list("hello world"));
assert @(s, 1) == 'e';
assert @(s, 20) == false;
assert @(s, 20, default = 100) == 100;
@(s, 1, value = 'a');
assert @(s, 1) == 'a';

s = [!a:1 !b:2];
assert @(s, !a) == 1;
assert @(s, !b) == 2;
assert @(s, !c, default = 100) == 100;
@(s, !c, value = 200);
@(s !a value = 1000);
assert @(s, !a) == 1000;
assert @(s, !b) == 2;
assert @(s, !c) == 200;
@(s !b value = 2000);
assert @(s, !b) == 2000;

s = #{1:2 3:4};
assert @(s, 1) == 2;
assert @(s, 3) == 4;
assert @(s, 10, default=100) == 100;
@(s, 10, value = 200);
assert @(s, 1) == 2;
assert @(s, 3) == 4;
assert @(s, 10, default=100) == 200;
@(s, 1, value = 300);
assert @(s, 1) == 300;
assert @(s, 3) == 4;
assert @(s, 10, default=100) == 200;

s = [1 2 3 4];
assert @(s, 1) == 2;
assert @(s, 10) == false;
assert @(s, 10, default = 100) == 100;
@(s, 2, value = 100);
assert @(s, 1) == 2;
assert @(s, 10) == false;
assert @(s, 2) == 100;

// issue #40 - implicit match for functions.
function f(a, b) |
 [x, 100] -> x * 100,
 [y, 1000] -> y * 1000;

assert f(10, 100) == 1000;
assert f(10, 1000) == 10000;

// issue #41 - `cases` replaced with `|`
declare generic join(a, b) |
  (list, array) -> append(a, array_to_list(b)),
  (list, string) -> append(a, string_to_list(b)),
  else -> [a, b];

assert join([1, 2, 3], #[10, 20, 30]) == [1, 2, 3, 10, 20, 30];
assert join([1, 2, 3], "hello") == [1, 2, 3, 'h', 'e', 'l', 'l', 'o'];
assert join([1, 2, 3], 43) == [[1, 2, 3], 43];

// issue #42 - parameter order of range changed
let noprimes = [j | i <- range(2, 8), j <- range(i*2, 50, fn(x) x+i)];
let primes = [x | x <- range(2, 50) where not(memq(x, noprimes))];
assert primes == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47];
