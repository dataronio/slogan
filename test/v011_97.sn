// `contains` generic function
function custom_dict2()
  let (data = #{'x:100, 'y:200})
    ^(message)
    | 'ref -> ^(k) hashtable_at(data, k)
    | 'ref_set -> ^(k, v) hashtable_set(data, k, v)
    | 'contains -> ^(k) hashtable_contains(data, k)

let cd = custom_dict2()
assert cd['x] == 100
assert cd['y] == 200
assert cd['x] = 20
assert cd['x] == 20
assert contains(cd, 'x)
assert contains(cd, 'y)
assert contains(cd, 'z) == false

// methods embedded in modules/closures.
function a(x, y) x + y
function a(x:string, y:string) string_append(x, y)

module m(a, b)
{ function b(x, y) x*y
  function a(x:string, y:integer) [x, y] }

assert a(1,2) == 3
assert a("hello ", "world") == "hello world"
assert m.a("hi", 20) == ["hi", 20]
assert m.b(10, 20) == 200

module m(c, d)
{ function c(x, y) x+y
  function c(x:string, y:integer) [x, y]
  function d(x, y) x*y }

assert m.c(1,2) == 3
assert m.d(10,20) == 200
assert m.c("hi", 1) == ["hi", 1]

// generics exported from modules.
module m(x, c1, c2)
{ function x(a, b);
  declare generic x
  function c1()
    ^(msg)
    | 'x -> ^(b) 10 + b
  function c2()
    ^(msg)
    | 'x -> ^(b) 10 - b }

assert m.x(m.c1(), 100) == 110
assert m.x(m.c2(), 100) == -90

function c3()
  ^(msg)
  | 'x -> ^(b) 10 * b

assert m.x(c3(), 100) == 1000

module m2(f, g, r, r_c, a)
{ function f() 100
  function a(x:integer, y:integer) [100, x, y]
  record r(c);
  function g() 200 }

assert m2.f() == 100
assert m2.a(1,2) == [100, 1, 2]
let rr = m2.r(c = 1000)
assert m2.r_c(rr) == 1000
assert m2.g() == 200

// changed match pattern variable from `@` to `%`
function merge(xs, ys)
 | [[], ys] -> ys
 | [xs, []] -> xs
 | [hx:tx, hy:ty] where hx < hy -> hx:merge(tx, hy:ty)
 | % -> hy:merge(hx:tx, ty)

function msort(xs)
 | [] -> []
 | [x] -> [x]
 | _ ->
  let (n = core.quotient(core.length(xs), 2))
   merge(msort(core.take(n, xs)), msort(core.drop(n, xs)))

assert msort([\o, \a, \i, \u, \e]) == [\a, \e, \i, \o, \u]
assert msort([53, 9, 2, 6, 19]) == [2, 6, 9, 19, 53]

// dynamic bindings
let _x_ = 1
let r = ?
!{ letdyn (_x_ = 10) ?r = _x_ }
assert ?r == 10
r = ?
!{ letdyn (_x_ = 10) letdyn (_x_ = 20) ?r = _x_ }
assert ?r == 20
core.task_set_data(self(), 10000)
assert core.task_data(self()) == 10000
assert letdyn (_x_ = 20) _x_ * core.task_data(self()) == 20 * 10000
assert _x_ == 1

function df() _y_ * 100

let _y_ = 20
assert df() == 2000
assert letdyn (_y_ = 5) df() == 500
assert df() 2000

let y = 10
function sf() y * 100
assert sf() == 1000
assert let (y = 5) sf() == 1000

let _a_, _b_ = 1, 2
assert [_a_, _b_] == [1, 2]
assert letdyn (_a_ = 100, _b_ = 200) [_a_, _b_] == [100, 200]
assert [_a_, _b_] == [1, 2]