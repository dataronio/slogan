// `contains` generic function
function custom_dict2()
  let (data = #{'x:100, 'y:200})
    ^(message)
    | 'ref -> ^(k) hashtable_at(data, k)
    | 'ref_set -> ^(k, v) hashtable_set(data, k, v)
    | 'contains -> ^(k) hashtable_contains(data, k)

let cd = custom_dict2()
assert cd['x] == 100
assert cd['y] == 200
assert cd['x] = 20
assert cd['x] == 20
assert contains(cd, 'x)
assert contains(cd, 'y)
assert contains(cd, 'z) == false

// methods embedded in modules/closures.
function a(x, y) x + y
function a(x:string, y:string) string_append(x, y)

module m(a, b)
{ function b(x, y) x*y
  function a(x:string, y:integer) [x, y] }

assert a(1,2) == 3
assert a("hello ", "world") == "hello world"
assert m.a("hi", 20) == ["hi", 20]
assert m.b(10, 20) == 200

module m(c, d)
{ function c(x, y) x+y
  function d(x, y) x*y
  function c(x:string, y:integer) [x, y] }

assert m.c(1,2) == 3
assert m.d(10,20) == 200
assert m.c("hi", 1) == ["hi", 1]

// generics exported from modules.
module m(x, c1, c2)
{ function x(a, b);
  function c1()
    ^(msg)
    | 'x -> ^(b) 10 + b
  function c2()
    ^(msg)
    | 'x -> ^(b) 10 - b

  declare generic x }

assert m.x(m.c1(), 100) == 110
assert m.x(m.c2(), 100) == -90

function c3()
  ^(msg)
  | 'x -> ^(b) 10 * b

assert m.x(c3(), 100) == 1000