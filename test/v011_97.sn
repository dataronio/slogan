// `contains` generic function
function custom_dict2()
  let (data = #{'x:100, 'y:200})
    ^(message)
    | 'ref -> ^(k) hashtable_at(data, k)
    | 'ref_set -> ^(k, v) hashtable_set(data, k, v)
    | 'contains -> ^(k) hashtable_contains(data, k)

let cd = custom_dict2()
assert cd['x] == 100
assert cd['y] == 200
assert cd['x] = 20
assert cd['x] == 20
assert contains(cd, 'x)
assert contains(cd, 'y)
assert contains(cd, 'z) == false

// methods embedded in modules/closures.
function a(x, y) x + y
function a(x:string, y:string) string_append(x, y)

module m(a, b)
{ function b(x, y) x*y
  function a(x:string, y:integer) [x, y] }

assert a(1,2) == 3
assert a("hello ", "world") == "hello world"
assert m.a("hi", 20) == ["hi", 20]
assert m.b(10, 20) == 200

module m(c, d)
{ function c(x, y) x+y
  function c(x:string, y:integer) [x, y]
  function d(x, y) x*y }

assert m.c(1,2) == 3
assert m.d(10,20) == 200
assert m.c("hi", 1) == ["hi", 1]

// generics exported from modules.
module m(x, c1, c2)
{ function x(a, b);
  declare generic x
  function c1()
    ^(msg)
    | 'x -> ^(b) 10 + b
  function c2()
    ^(msg)
    | 'x -> ^(b) 10 - b }

assert m.x(m.c1(), 100) == 110
assert m.x(m.c2(), 100) == -90

function c3()
  ^(msg)
  | 'x -> ^(b) 10 * b

assert m.x(c3(), 100) == 1000

module m2(f, g, r, r_c, a)
{ function f() 100
  function a(x:integer, y:integer) [100, x, y]
  record r(c);
  function g() 200 }

assert m2.f() == 100
assert m2.a(1,2) == [100, 1, 2]
let rr = m2.r(c = 1000)
assert m2.r_c(rr) == 1000
assert m2.g() == 200

// changed match pattern variable from `@` to `%`
function merge(xs, ys)
 | [[], ys] -> ys
 | [xs, []] -> xs
 | [hx:tx, hy:ty] where hx < hy -> hx:merge(tx, hy:ty)
 | % -> hy:merge(hx:tx, ty)

function msort(xs)
 | [] -> []
 | [x] -> [x]
 | _ ->
  let (n = core.quotient(core.length(xs), 2))
   merge(msort(core.take(n, xs)), msort(core.drop(n, xs)))

assert msort([\o, \a, \i, \u, \e]) == [\a, \e, \i, \o, \u]
assert msort([53, 9, 2, 6, 19]) == [2, 6, 9, 19, 53]

// dynamic bindings
let %x% = 1
let r = ?
!{ letdyn (%x% = 10) ?r = %x% }
assert ?r == 10
r = ?
!{ letdyn (%x% = 10) letdyn (%x% = 20) ?r = %x% }
assert ?r == 20
core.task_set_data(self(), 10000)
assert core.task_data(self()) == 10000
assert letdyn (%x% = 20) %x% * core.task_data(self()) == 20 * 10000
assert %x% == 1

function df() %y% * 100

let %y% = 20
assert df() == 2000
assert letdyn (%y% = 5) df() == 500
assert df() 2000

let y = 10
function sf() y * 100
assert sf() == 1000
assert let (y = 5) sf() == 1000

let %a%, %b% = 1, 2
assert [%a%, %b%] == [1, 2]
assert letdyn (%a% = 100, %b% = 200) [%a%, %b%] == [100, 200]
assert [%a%, %b%] == [1, 2]

function %f%(x) x * 100
assert %f%(20) == 2000
assert letdyn(%f% = ^(x) x + 100) %f%(20) == 120
assert %f%(20) == 2000

module m(a, %a%, %af%)
{ let a = 100
  let %a% = 200
  function %af%(x, y) x * y }

assert m.a == 100
assert m.%a% == 200
assert m.%af%(2, 5) == 10
let %ma% = m.%a%
assert letdyn (%ma% = 20) %ma% == 20
assert m.%a% == 200
assert %ma% == 200
let %maf% = m.%af%
assert letdyn (%maf% = ^(x, y) x + y) %maf%(2, 5) == 7
assert m.%af%(2, 5) == 10

// namespaces
namespace n1
{ function f(x) #{1:x}
  let g = 100 }

assert n1::f(10)[1] == 10
assert n1::g == 100

let #{f, g} = n1
assert f(200)[1] == 200
assert g == 100

let #{'f:nf, 'g:ng} = n1
assert nf(200)[1] == f(200)[1]
assert g == ng

namespace n2
{ function f(x) x * 100
  record rr(a, b)
  function g(y) 2 * y
  let ttt = 200 }

assert n2::f(10) == 1000
let rr0 = n2::rr(a = 20, b = 30)
assert n2::rr_a(rr0) == 20
assert n2::rr_b(rr0) == 30
n2::rr_set_b(rr0, 100);
assert n2::rr_b(rr0) == 100
assert n2::g(10) == 20
assert n2::ttt == 200

let #{'rr:abc, 'rr_a:a, 'rr_set_a:set_a,
      'g:aaa, 'ttt:tt} = n2
rr0 = abc(a=1000,b=2000)
assert a(rr0) == 1000
set_a(rr0, 1)
assert a(rr0) == 1
assert aaa(20) == 40
assert tt == 200

namespace n
{ module m(a)
   function a() 'hello }

assert (n::m).a() == 'hello

module m (xyz)
  namespace xyz
  { function b() 'hi }

assert m.xyz::b() == 'hi

// some more match tests:
function fold_tree(f, e, t)
  match(t)
    'lf -> e
  | x:l:r -> f(x, fold_tree(f, e, l), fold_tree(f, e, r))

let t = 1:(0:'lf:'lf):(6:(4:'lf:'lf):'lf)
assert fold_tree(`+`, 0, t) == 11

function tree_preorder(t)  fold_tree(^(x, l, r) core.append([x], l, r), [], t)
function tree_inorder(t)   fold_tree(^(x, l, r) core.append(l, [x], r), [], t)
function tree_postorder(t) fold_tree(^(x, l, r) core.append(l, r, [x]), [], t)

assert tree_preorder(t) == [1, 0, 6, 4]
assert tree_inorder(t) == [0, 1, 4, 6]
assert tree_postorder(t) == [0, 4, 6, 1]

// interleaving lazy seqs
function interleave(xs, ys) core.first(xs):~interleave(ys, core.rest(xs))
function all_from(xs) xs:~interleave(all_from(0:xs), all_from(1:xs))
let allones = all_from([])
assert core.take(20, allones) == [[], [0], [1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1], [0, 1, 0, 0]]

// record patterns can match member-names and general variables by position
record point(x, y, label)
let p1 = point(x=100, y=200, label="abc")
let p2 = point(x=10, y=20, label="xyz")
assert match(p1) point(x, label, y) -> [x,y,label] == [100,200,"abc"]
assert match(p2) point(@x, @y, @label) -> [@x,@y,@label] == [10,20,"xyz"]
assert match(p1) point(x=100, label, y) -> [label, y] == ["abc", 200]
assert match(p2) point(x=100, label, y) -> [label, y] | _ -> false == false

// auto-generated list of record members
assert members@point == ['x, 'y, 'label]

// ignorable varnames in let
assert (let (x = 200, _ = 300, y = 400, _ = 500) [x,y]) == [200, 400]
assert (letseq (x = 200, _ = 300, y = x*10 , _ = 500) [x,y]) == [200, 2000]

// finally block to return value of try-expression
let e = false
let f = false
let craise = core.raise
assert try let (x = 1000) if (x == 0) craise("err!") else x*20 catch (ex) { e = ex; 1 } == 20000
assert e == false
assert try let (x = 0) if (x == 0) craise("err!") else x*20 catch (ex) { e = ex; 1 } == 1
assert e == "err!"
e = false
assert (try let (x = 0) if (x == 0) craise("err!") else x*20 catch (ex) { e = ex; 1 } finally f = "ok") == 1
assert f == "ok"
f = false
assert try let (x = 100) if (x == 0) craise("err!") else x*20 finally {f = "ok"; 2 } == 2000
assert f == "ok"
f = false
assert (try let (x = 100) if (x == 0) craise("err!") else x*20 finally f = "ok") == 2000
assert f == "ok"