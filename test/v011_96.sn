// Pattern bindings in letseq and let statement.
function rl() [1,2,3,[4,[5, 6], [7], 8]]
assert (letseq ([a,b,c,[d,[e,f],[g],h]] = rl()) [a,b,c,d,e,f,g,h]) == [1,2,3,4,5,6,7,8]
assert (letseq ([a,_,c,[d,[_,f],[g],_]] = rl()) [a,c,d,f,g]) == [1,3,4,6,7]

assert (letseq (a:b = 1:2) a+b) == 3
assert (letseq (#{1:x, 'hello:y, 'ss:z} = #{1:100, 'hello:200}) [x,y,z]) == [100,200,false]
assert (letseq (#{1:_, 'hello:y, 'ss:z} = #{1:100, 'hello:200}) [y,z]) == [200,false]
assert (letseq (x:y:z:[a,b] = 10:20:30:[100,200]) [x,y,z, a, b]) == [10,20,30,100,200]
assert (letseq (x:#{1:y, 2:z}:a:[b] = 10:#{1:20, 2:30}:40:[50]) [x,y,z,a,b]) == [10,20,30,40,50]

let [a,b,c,_] = rl()
assert [a,b,c] == [1,2,3]
let a:b = 1:2
assert a:b == 1:2
let x:#{1:y, 2:z}:a:[b] = 10:#{1:20, 2:30}:40:[50]
assert [x,y,z,a,b] == [10,20,30,40,50]

assert (letseq ([x,y,z] = [1,2,3], a = x+5, [b,c] = [x,y]) [x,y,z,a,b,c]) == [1, 2, 3, 6, 1, 2]
assert (letseq (#{1:[x,y], 2:z} = #{1:[200,300], 2:400}) [x,y,z]) == [200,300,400]
assert letseq ([x,y,_,[a,_]] = #[1,2,3,[4,5]]) [x,y,a] == [1, 2, 4]
assert letseq ([x,y,_,[a,_]] = [1,2,3,#[4,5]]) [x,y,a] == [1, 2, 4]
assert letseq ([x,y,_,[a,_]] = #[1,2,3,#[4,5]]) [x,y,a] == [1, 2, 4]
assert letseq ([x,y,_,[a,_]] = #[1,2,3,#s32[4,5]]) [x,y,a] == [1, 2, 4]
assert letseq ([x,y,_,[a,_]] = #[1,2,3,#u8[4,5]]) [x,y,a] == [1, 2, 4]

let [a,b,[c,[d]]] = #[1,2,[3,#u64[4]]]
assert [a,b,c,d] == [1,2,3,4]

// realize function for lazy sequences.
function ints(x) x:~ints(x+1)
let xs = ints(10)
let ys = core.realize(5, xs)
assert core.length(core.first(ys)) == 5
assert core.head(ys)[2] == 12
ys = core.realize(50, core.tail(ys))
assert core.length(core.head(ys)) == 50
assert core.head(ys)[5] == 20