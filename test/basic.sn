function recur(a)
  if (a > 0) recur(a - 1)
  else a;

assert(recur(10), 0);
assert(recur(-10), -10);

declare generic concat(a, b);

method concat(list, list)(a, b) append(a, b);
method concat(string, string)(a, b) string_append(a, b);

assert(concat([1 2 3], [4 5 6]), [1 2 3 4 5 6]);
assert(concat("hello " "world"), "hello world");

define old_add = `+`;
method `+`(string, string)(a, b) concat(a, b);
assert("hello " + "world", "hello world");
assert(1 + 2, 3);
`+` = old_add;

namespace n;
function f(a) a;
namespace;

assert(n_f(10), 10);
import n as b;
assert(b_f(20), 20);
import n;
assert(f(100), 100);

record r(a, b where is_integer(b));
define a = r(a = "hi", b = 20);
assert(r_a(a), "hi");
assert(r_b(a), 20);

define x = true;
try r_set_b(a, "ok")
catch (e) r_set_b(a, 200)
finally x = false;

assert(r_b(a), 200);
assert(x, false);

define x = ?;
task({task_sleep(2); ?x = 100});
assert(?x, 100);

function ints(n) n::ints(n+1);
x = ints(0);
assert(nth(10, x), 10);

x = [1 2 3 4];
assert({match(x) [1 a 3 b] -> a + b}, 6);

assert({case(x) [1 2 5 4] -> "ok"}, false);