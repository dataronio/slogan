assert 1 + 2 == 3
assert (1 + 2 <> 3) == false
assert 1 + 2 * 5 == 11
assert 1 + 2 <= 3
assert 1 + 2 <= 3 && 4 * 3 == 12
assert 1 + 2 > 3 || 4 * 3 == 12

let af,b = ^(i) i, af(10)+20
assert af(10) == 10
assert b == 30

function recur(a)
  if (a > 0) recur(a - 1)
  else a

assert recur(10) == 0
assert recur(-10) == -10

function concat(a, b);
declare generic concat

function listc(a) ^(msg) | 'concat -> ^(b) core.append(a, b)
function stringc(a) ^(msg) | 'concat -> ^(b) core.string_append(a, b)
assert concat(listc([1, 2, 3]), [4, 5, 6]) == [1, 2, 3, 4, 5, 6]
assert concat(stringc("hello "), "world") == "hello world"

module n(f, lf)
{ function f(a) a
  function lf(a, b) if (a) b() else false }

assert n.f(10) == 10
let x = 10
n.lf(true, ^x = 300)
assert x == 300
n.lf(false, ^x = 0)
assert x == 300

b = n
assert b.f(20) == 20
x = 10
b.lf(true, ^x = 1)
assert x == 1
b.lf(false, ^x = 0)
assert x == 1

let f, lf = n.f, n.lf
assert f(100) == 100
x = 0
lf(true, ^x = 1)
assert x == 1
lf(false, ^x = 1)
assert x == 1

record r(a, b where is_integer(b) && b > 100)
let a = r(a = "hi", b = 200)
assert r_a(a) == "hi"
assert r_b(a) == 200
let x = false
let y = false
try r(a=1, b=100) catch (e) x = true finally y = true
assert x && y

let x = true
try r_set_b(a, "ok")
catch (e) r_set_b(a, 200)
finally x = false

assert r_b(a) == 200
assert x == false

function ints(n) n:~ints(n+1)
x = ints(0)
assert core.nth(10, x) == 10

x = [1, 2, 3, 4]
assert (match(x) [10, a, 3, b] -> 1000 | [1, a, 3, b] -> a + b) == 6
x = [10, 2, 3, 4]
assert (match(x) [10, a, 3, b] -> 1000 | [1, a, 3, b] -> a + b) == 1000

assert (case(x) [1, 2, 5, 4] -> "ok") == false
x = 5
assert (case(x) [1, 2, 5, 4] -> "ok") == "ok"

record rec_a(x, y)
record rec_b(x, y, z)
x = rec_a(x = 100, y = 200)
y = rec_b(x = 1, y = 2, z = 3)

assert (match(x) rec_a(x, y) -> x * y | rec_b(x, y, z = 3) -> x + y) == 20000
assert (match(y) rec_a(x, y) -> x * y | rec_b(x, y, z = 3) -> x + y) == 3

y = rec_b(x = 1, y = 2, z = 4)

assert (match(y) rec_a(x, y) -> x * y | rec_b(x, y, z = 3) -> x + y | rec_b(x, y, z = 4) -> y * 2) == 4

y = rec_b(x = 1, y = 3, z = 4)

assert (match(y) rec_a(x, y) -> x * y | rec_b(x, y = 2, z) -> x + z | rec_b(x, y, z = 4) -> y * 2) == 6
assert (match([1, 2, 3]) rec_a(x, y) -> x * y | [x, y, z] -> x + y + z) == 6
assert (match(x) rec_a(x, y) -> x * y | [x, y, z] -> x + y + z) == 20000

x = #{'name:'nemo, 'age:3}
assert (match(x) #{'name:n, 'age:a} -> [n, a]) == ['nemo, 3]
assert (match(x) #{'age:a, 'name:n} -> [n, a]) == ['nemo, 3]
x = ['name:'nemo, 'age:3]
assert (match(x) ['name:n, 'age:a] -> [n, a]) == ['nemo, 3]
assert (match(x) ['age:a, 'name:n] -> [n, a] | _ -> false) == false
assert (match(#{1:2, 3:[1, 2, 3, 4, 5]}) [1:a, 3:[1, b, 3, c, 5]] -> a * b * c | #{1:a, 3:[1, b, 3, c, 5]} -> a+b+c) == 8
assert (match([1:2, 3:[1, 2, 3, 4, 5]]) [1:a, 3:[1, b, 3, c, 5]] -> a * b * c | #{1:a, 3:[1, b, 3, c, 5]} -> a+b+c) == 16

function u(a, b) if (a) b() else false
x = false

assert u(false, ^100) == false
assert u(true, ^100) == 100
u(false, ^x = true)
assert x == false
u(true, ^x = true)
assert x == true

function run_add(i, x, b) i + x
assert do_times(10, run_add, init = 0) == 45
assert do_times(10, run_add, init = 0, from = 5) == 35
assert do_times(10, run_add, init = 0, from = -5) == 30
assert do_times(-10, run_add, init = 0, from = -5) == -35
assert do_times(-10, run_add, init = 0, from = -50) == -1220
assert do_times(10, ^(i, x, b) if (i == 5) b("ok") else i) == "ok"
assert do_times(0, run_add, init = 0, from = 9) == 45

// harmonic series
a = fold_left(^(i, sum) sum + 1.0/i, 0, core.range(1,2))
assert a == 1.5

// list comprehensions
let s =[expt(x,2) | x <- core.range(0, 10)]
assert s == [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
assert [x | x <- s where core.remainder(x, 2) == 0] == [0, 4, 16, 36, 64, 100]
assert [x*y*z | [x,y,z] <- [[1,2,3], [4,5,6]]] == [6, 120]
let buy = ['oranges:4, 'newspaper:1, 'apples:10, 'pears:6, 'milk:3];
assert [name:2*number | name:number <- buy] == ['oranges:8, 'newspaper:2, 'apples:20, 'pears:12, 'milk:6]

let words = string_split("The quick brown fox jumps over the lazy dog")
words = [[string_upcase(w), string_downcase(w), string_length(w)] | w <- words]
assert words == [["THE", "the", 3], ["QUICK", "quick", 5], ["BROWN", "brown", 5], ["FOX", "fox", 3], ["JUMPS", "jumps", 5], ["OVER", "over", 4], ["THE", "the", 3], ["LAZY", "lazy", 4], ["DOG", "dog", 3]]

// partial application
function deriv(f, dx, x) (f(x+dx) - f(x))/dx
let pf = partial(deriv, cos, 1.5)
assert pf(1e-10) == deriv(cos, 1.5, 1e-10)

// contracts for functions
function precheck(x, y) is_integer(x) && x > 10 && is_integer(y) && y > 0

function a(x, y) where precheck(x, y) -> is_integer(%)
 if (x == 20) "ok"
 else x * y
 
assert (try a(1, 2) catch(e) error_message(e)) == 'precondition_failed
assert a(11, 2) == 22
assert (try a(20, 2) catch(e) error_message(e)) == 'postcondition_failed

disable_function_contracts()
assert (try a(1, 2) catch(e) error_message(e)) == 2
assert a(11, 2) == 22
assert (try a(20, 2) catch(e) error_message(e)) == "ok"
enable_function_contracts()

disable_asserts()
assert (try a(1, 2) catch(e) error_message(e)) <> 'precondition_failed
assert a(11, 2) <> 22
assert (try a(20, 2) catch(e) error_message(e)) <> 'postcondition_failed
enable_asserts()

function b(x, y) where precheck(x, y)
 if (x == 20) "ok"
 else x * y

assert (try b(1, 2) catch(e) error_message(e)) == 'precondition_failed
assert b(11, 2) == 22
assert (try b(20, 2) catch(e) e) == "ok"

function is_palindrome(s)
{ let chars = string_to_list("abcdefghijklmnopqrstuvwxyz")

  function to_chars(s)
   list_to_string(filter(^(c) core.member(c, chars),
                  string_to_list(string_downcase(s))))

  function is_pal(s)
   let (len = string_length(s))
    if (len <= 1) true
    else s[0] == s[len-1] && is_pal(s[1:len-1])

   is_pal(to_chars(s)) }

assert core.not(is_palindrome("abc"))
assert is_palindrome("a")
assert is_palindrome("aba")
assert is_palindrome("malayalam")
assert is_palindrome("")

function is_palindrome2(s) where core.is_string(s)
{ let chars = string_to_list("abcdefghijklmnopqrstuvwxyz")

  function to_chars(s)
   list_to_string(filter(^(c) core.member(c, chars),
                  string_to_list(string_downcase(s))))

  function is_pal(s)
   let (len = string_length(s))
    if (len <= 1) true
    else s[0] == s[len-1] && is_pal(s[1:len-1])

   is_pal(to_chars(s)) }

assert core.not(is_palindrome2("abc"))
assert is_palindrome2("a")
assert is_palindrome2("aba")
assert is_palindrome2("malayalam")
assert is_palindrome2("")
assert try is_palindrome2(121) catch (e) error_message(e) == 'precondition_failed

function is_palindrome3(s) where core.is_string(s) -> is_boolean(%)
{ let chars = string_to_list("abcdefghijklmnopqrstuvwxyz")

  function to_chars(s)
   list_to_string(filter(^(c) core.member(c, chars),
                  string_to_list(string_downcase(s))))

  function is_pal(s)
   let (len = string_length(s))
    if (len <= 1) true
    else s[0] == s[len-1] && is_pal(s[1:len-1])

   if (s == "") 1
   else is_pal(to_chars(s)) }

assert core.not(is_palindrome3("abc"))
assert is_palindrome3("a")
assert is_palindrome3("aba")
assert is_palindrome3("malayalam")
assert try is_palindrome3("") catch(e) error_message(e) == 'postcondition_failed
assert try is_palindrome3(121) catch (e) error_message(e) == 'precondition_failed

let t1 = [1, "two", 3]
let t2 = [t1, 3.25]
assert core.append(t1, t2)[3] == [1, "two", 3]
assert core.append(t1, t2)[2:5] == [3, [1, "two", 3], 3.25]

assert core.count("hello, world") == string_length("hello, world")
assert core.count([1,2,3,4,15]) == 5
assert core.count(#[1,2,3,4,15]) == 5
assert core.count(#b[1,0,1]) == 3
assert core.count(#u8[1,2,3,4,15]) == 5
assert core.count(#s8[1,2,3,4,15]) == 5
assert core.count(#u16[1,2,3,4,15]) == 5
assert core.count(#s16[1,2,3,4,15]) == 5
assert core.count(#u32[1,2,3,4,15]) == 5
assert core.count(#s32[1,2,3,4,15]) == 5
assert core.count(#u64[1,2,3,4,15]) == 5
assert core.count(#s64[1,2,3,4,15]) == 5
assert core.count(#f32[1.,2.,3.,4.,1.5]) == 5
assert core.count(#f64[1.,2.,3.,4.,1.5]) == 5

t1 = for (i = 0; i < 10; core.inc(i)) i
assert t1 == 9
assert core.not(for (i = 0; i < 10; core.inc(i)) if (i == 5) break else i)
assert core.not(for (i = 0; i < 10; core.inc(i)) if (i == 5) break() else i)
assert for (i = 0; i < 10; core.inc(i)) if (i == 5) break(100) else i == 100
t1 = 0
for (i = 0; i < 10; core.inc(i)) if (core.mod(i, 2) == 0) continue else t1 = i + t1
assert t1 == 25

// issue - 103
let j = 0
for (i = 0; i < 10;) { j = i; i = i + 5 }
assert j == 5
j = 0
for(;;) { j = j + 1; when (j > 10) break }
assert j == 11
j = 0
for (i = 0;;) { i = i + 1; j = i; when(i > 10) break }
assert j == 11
j = 0
for (i = 0; i < 10;) { i = i + 1; j = i }
assert j == 10
j = 0
for (i = 0; i < 10; core.inc(i)) j = i
assert j == 9

let xs = [1,2,3,4,5,6]
assert sort(xs) == xs
assert sort(xs, `>`) == core.reverse(xs)
assert sort(xs, `<`, 'merge) == xs
assert sort(xs, `>`, 'merge) == core.reverse(xs)
