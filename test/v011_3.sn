record point2d(x:real, y:real)

function magnitude(p)
| point2d(x, y) -> sqrt(expt(x, 2) + expt(y, 2))

function distance(p1, p2)
  magnitude(point2d(x = point2d_x(p1) - point2d_x(p2),
                    y = point2d_y(p1) - point2d_y(p2)))

record circle(center:point2d, radius:real)
record rect(lower_left:point2d, width:real, height:real)
record segment(endpoint1:point2d, endpoint2:point2d)

function is_inside_scene_element(p, scene_element)
  match(scene_element)
    circle(center, radius)          -> distance(center, p) < radius
  | rect(lower_left, width, height) -> and(point2d_x(p) > point2d_x(lower_left),
                                           point2d_x(p) < point2d_x(lower_left) + width,
                                           point2d_y(p) > point2d_y(lower_left),
                                           point2d_y(p) < point2d_y(lower_left) + height)
  | segment(endpoint1, endpoint2)   -> false                                                

function is_inside_scene(point, scene)
  exists(^(el) is_inside_scene_element(point, el), scene)

let p = point2d(x = 3., y = 7.)
let c = point2d(x = 4., y = 4.)
assert core.not(is_inside_scene(p, [circle(center = c, radius = 0.5)]))
assert is_inside_scene(p, [circle(center = c, radius = 5.)])

record running_sum(sum:real = 0, sum_sq:real = 0, samples = 0 where is_real(samples))

function mean(rsum) running_sum_sum(rsum) / running_sum_samples(rsum)

function stdev(rsum) 
  sqrt(running_sum_sum_sq(rsum) / running_sum_samples(rsum) 
       - expt(running_sum_sum(rsum)/running_sum_samples(rsum), 2))

function update(rsum, x)
{ running_sum_set_samples(rsum, running_sum_samples(rsum) + 1)
  running_sum_set_sum(rsum, running_sum_sum(rsum) + x)
  running_sum_set_sum_sq(rsum, running_sum_sum_sq(rsum) + x * x) }

let rsum = running_sum()
assert is_zero(running_sum_sum(rsum))
assert is_zero(running_sum_sum_sq(rsum))
assert is_zero(running_sum_samples(rsum))

for_each(^(x) update(rsum, x), [1., 3., 2., -7., 4., 5.])

assert core.floor(mean(rsum)) == 1.
assert ceiling(stdev(rsum)) == 4.

try running_sum(sum = "hello") catch (e) assert e
try running_sum(samples = "hi") catch (e) assert e

// unzip
let xs = zip([1,2,3], ["one", "two", "three"])
assert xs == [1:"one", 2:"two", 3:"three"]
let ys = unzip(xs);
assert ys == [[1, 2, 3], "one", "two", "three"]
assert core.car(ys) == [1, 2, 3]
assert core.cdr(ys) == ["one", "two", "three"]

// parsing of match changed to take care of `or-patterns`.
function color_code(c)
    match (c)
      "red" -> [255, 0, 0]
    | "green" -> [0, 255, 0]
    | "blue" -> [0, 0, 255]
    | else -> 'unknown_color

assert color_code("red") == [255, 0, 0]
assert color_code("blu") == 'unknown_color
assert color_code("blue") == [0, 0, 255]

function f1(xs)
  match (xs)
    [2, x, y] -> x + y
  | [3, x, y, z] -> x + y + z

assert f1([2, 10, 20]) == 30
assert f1([3, 10, 20, 30]) == 60

function is_nmf(e) error_message(e) == 'no_match_found

assert try f1([3, 10, 20]) catch (e) is_nmf(e)
assert try f1([4, 10, 20, 30]) catch (e) is_nmf(e)

function f2(msg)
  case (msg)
    hi -> 'hello
  | bye -> 'see_you

assert f2('hi) == 'hello
assert f2('bye) == 'see_you

function f3(msg)
  match (msg)
    'hi -> 'hello
  | 'bye -> 'see_you;

assert f3('hi) == 'hello
assert f3('bye) == 'see_you

function f4(msg)
  | 'hi -> 'hello
  | 'bye -> 'see_you;

assert f4('hi) == 'hello
assert f4('bye) == 'see_you

function g(a, b)
  | [1, x] -> x * 100
  | [2, x] -> x + 100

assert g(1, 10) == 1000

assert
match ([1, 2, 3])
  [_, b, _] where b >= 10 -> 'hi
| [_, b, _] where b >= 1 -> 'hello
==  'hello

assert
try
match([1, 2, 3])
  [_, b, _] where b >= 10 -> 'hi
| [_, b, _] where b >= 3 -> 'hello
catch (e) is_nmf(e)

assert
match ([1, 20, 3])
  [_, b, _] where b >= 10 -> 'hi
| [_, b, _] where b >= 1 -> 'hello
== 'hi

assert
match ([1, 2, 3])
  [_, b, _] where b >= 10 -> 'hi
| % where b >= 1 -> 'hello
== 'hello

// or-pattern test:
function find_first_stutter(xs)
| [] | [_] -> 'none
| x:y:xs -> if (x == y) x else find_first_stutter(y:xs)

assert find_first_stutter([1,2,3,3,4]) == 3
assert find_first_stutter([1,2,3,4]) == 'none

// string split optimized
assert string_split("hello, world") == ["hello,", "world"]
assert string_split("hello, world", \,) == ["hello", " world"]
assert string_split("hello,, world", \,) == ["hello", " world"]
assert string_split("hello,, world", \,, true) == ["hello", "", " world"]

assert string_split("1;2.3,4.5;6", [\;, \., \,]) == ["1", "2", "3", "4", "5", "6"]
assert string_split("1;2.3,4.5;6", [\;, \,]) == ["1", "2.3", "4.5", "6"]

assert string_split("hello world") == ["hello", "world"]
assert string_split("hello world", ^(c) char_is_eq(c, \l)) == ["he", "o wor", "d"]
assert string_split("hello world", ^(c) char_is_eq(c, \l), true) == ["he", "", "o wor", "d"]

// string->time conversion
let leap_date = ['seconds:25, 'minute:34, 'hour:2, 'month_day:5, 'month:3, 'year:2008, 'week_day:3, 'year_day:65, 'is_utc:false, 'is_dst:false];
assert string_to_time(time_to_string(leap_date)) == leap_date;

let non_leap_date = ['seconds:25, 'minute:34, 'hour:2, 'month_day:5, 'month:3, 'year:2009, 'week_day:4, 'year_day:64, 'is_utc:false, 'is_dst:false];
string_to_time(time_to_string(non_leap_date)) == non_leap_date;
