// generate proper placeholder names for ignored parameters
function f(_) 1
function g(_, _) 2
function h(_, a, _) a
function i(_, a, _, b) a + b

assert f(100) == 1
assert g(100, 200) == 2
assert h(100, 200, 300) == 200
assert i(100, 200, 300, 400) == 600

// issue 111
function balance(color, t, z, d)
  | ['b, #['r,#['r,a,x,b],y,c], z, d] -> #['r, a, b, c, d, x ,y, z]
  | ['b, #['r,a,x,#['r,b,y,c]], z, d] -> #['g, a, b, c, d, x ,y, z]
  | ['b, a, x, #['r,#['r,b,y,c],z,d]] -> #['b, a, b, c, d, x ,y, z]
  | ['b, a, x, #['r,b,y,#['r,c,z,d]]] -> #['a, a, b, c, d, x, y, z]
assert balance('b, #['r, #['r, 10, 20, 30], 40, 50], 60, 70) == #['r, 10, 30, 50, 70, 20, 40, 60]
assert balance('b, #['r, 10, 20, #['r, 30, 40, 50]], 60, 70) == #['g, 10, 30, 50, 70, 20, 40, 60]
assert balance('b, 10, 20, #['r, #['r, 30, 40, 50], 60, 70]) == #['b, 10, 30, 50, 70, 20, 40, 60]
assert balance('b, 10, 20, #['r, 30, 40, #['r, 50, 60, 70]]) == #['a, 10, 30, 50, 70, 20, 40, 60]

// issue 110 - methods
// not polluting the `+` in the global namespace.
{ function `+`(a, b) add(a, b)
  function `+`(a:string, b:string) string_append(a, b)
  function `+`(a:list, b:list) core.append(a, b)

  assert  1 + 2 == 3
  assert "hello " + "world" == "hello world"
  assert [1,2,3] + [4,5] == [1, 2, 3, 4, 5] }

function collide_with(x, y) false

record asteroid()
record spaceship()
function collide_with(x:asteroid, y:asteroid) 'asteroid:'asteroid
function collide_with(x:asteroid, y:spaceship) 'asteroid:'spaceship
function collide_with(x:spaceship, y:asteroid) 'spaceship:'asteroid
function collide_with(x:spaceship, y:spaceship) 'spaceship:'spaceship
let a = asteroid()
let s = spaceship()

assert collide_with(a, a) == 'asteroid:'asteroid
assert collide_with(s, s) == 'spaceship:'spaceship
assert collide_with(s, a) == 'spaceship:'asteroid
assert collide_with(a, s) == 'asteroid:'spaceship

// fixes for optional/key arguments with type information
function f0(a = 10, b = 20) a + b
assert f0() == 30
assert f0(100) == 120
assert f0(100, 200) == 300

function f1(a, @rest b) a:b
assert f1(100) == 100:[]
assert f1(100, 200) == 100:[200]
assert f1(100, 200, 300) == 100:[200, 300]

function f2(a, @key b) a + b
assert f2(10, b = 100) == 110

function f3(a, @key b=20) a + b
assert f3(10) == 30
assert f3(10, b = 100) == 110

function f4(a = 10, @key b=20) a + b
assert f4() == 30
assert f4(100) == 120
assert f4(100, b = 200) == 300

function g0(a, b) false
function g0(a:number = 10, b:number = 20) a + b
function g0(a:string = "ok", b:string = "bye") string_append(a, b)

assert g0() == "okbye"
assert g0("hello ") == "hello bye"
assert g0("hello ", "world") == "hello world"
assert g0(100, 200) == 300

function h0(a, @key b) false
function h0(a:number = 10, @key b:number = 20) a + b
function h0(a:string = "ok",@key  b:string = "bye") string_append(a, b)

assert h0() == "okbye"
assert h0("hello ") == "hello bye"
assert h0("hello ", b = "world") == "hello world"
assert h0(100, b = 200) == 300

function i0(@key a, b) false
function i0(@key a:number = 10, b:number = 20) a + b
function i0(@key a:string = "ok",  b:string = "bye") string_append(a, b)

assert i0() == "okbye"
assert i0(a = "hello ") == "hello bye"
assert i0(a = "hello ", b = "world") == "hello world"
assert i0(a = 100, b = 200) == 300

// optimized list match
assert match([1,2,[3,4,[5]]]) [a,b] -> a+b | [a,_,[b,_,[c]]] -> a+b+c == 9
assert match([1,2]) [a,b] -> a+b | [a,_,[b,_,[c]]] -> a+b+c == 3
assert match([1,#[2, [3, 4]]]) [a, #[b]] -> a+b | [a, #[b, [c, d]]] -> a+b+c+d == (1+2+3+4)
assert match([1,#[2]]) [a, #[b]] -> a+b | [a, #[b, [c, d]]] -> a+b+c+d == (1+2)
assert match(#[1, [2, 3, #(4,5)]]) [a, [b,c,#(d,e)]] -> a-b-c-d-e | #[a,[b,c,#(d,e)]] -> a+b+c+d+e == (1+2+3+4+5)
assert match([1, [2, 3, #(4,5)]]) [a, [b,c,#(d,e)]] -> a-b-c-d-e | #[a,[b,c,#(d,e)]] -> a+b+c+d+e == (1-2-3-4-5)
record a(x,y)
assert match([a(x=10, y=20), 30]) [a(x,y)] -> x*y | [a(x,y), z] -> x+y+z == 10+20+30
assert match([50, a(x=10, y=20)]) [z, a(x,y)] -> x*y*z | [a(x,y), z] -> x+y+z == 10*20*50
assert match([10, #[20, [30, 40, #[50, 60, [70]]]]]) [a, b, c, d, e, f, g] -> a+b+c+d+e+f+g | [a, #[b, c, d, [e, f, g]]] -> a-b-c-d-e-f-g | [a, #[b, [c, d, #[e, f, [g]]]]] -> a*b*c*d*e*f*g | #[a, [b, #[c, d, [e, f, #[g]]]]] -> a/b/c/d/e/f/g == 50400000000
assert match(#[10, [20, #[30, 40, [50, 60, #[70]]]]]) [a, b, c, d, e, f, g] -> a+b+c+d+e+f+g | [a, #[b, c, d, [e, f, g]]] -> a-b-c-d-e-f-g | [a, #[b, [c, d, #[e, f, [g]]]]] -> a*b*c*d*e*f*g | #[a, [b, #[c, d, [e, f, #[g]]]]] -> a/b/c/d/e/f/g == 1/504000000
assert match([10,#[20, 30, 40, [50, 60, 70]]]) [a, b, c, d, e, f, g] -> a+b+c+d+e+f+g | [a, #[b, c, d, [e, f, g]]] -> a-b-c-d-e-f-g | [a, #[b, [c, d, #[e, f, [g]]]]] -> a*b*c*d*e*f*g | #[a, [b, #[c, d, [e, f, #[g]]]]] -> a/b/c/d/e/f/g == -260
assert match([10,20,30,40,50,60,70]) [a, b, c, d, e, f, g] -> a+b+c+d+e+f+g | [a, #[b, c, d, [e, f, g]]] -> a-b-c-d-e-f-g | [a, #[b, [c, d, #[e, f, [g]]]]] -> a*b*c*d*e*f*g | #[a, [b, #[c, d, [e, f, #[g]]]]] -> a/b/c/d/e/f/g == 280

// extended pattern matching tests
module leftist_heap(is_empty, insert, find_min, delete_min)
{ function rank(h)
  | [] -> 0
  | r:_:_:_ -> r

  function make_t(x, a, b)
    if (rank(a) > rank(b)) rank(b)+1:x:a:b
    else rank(a)+1:x:b:a

  function is_empty(h) | [] -> true | _ -> false

  function merge(h1, h2)
  | [_, []] -> h1
  | [[], _] -> h2
  | [_:x:a1:b1, _:y:a2:b2] ->
    if (x <= y) make_t(x, a1, merge(b1, h2))
    else make_t(y, a2, merge(h1, b2))

  function insert(x, h) merge(1:x:[]:[], h)

  function find_min(h)
  | [] -> core.raise('empty)
  | _:x:a:b -> x

  function delete_min(h)
  | [] -> core.raise('empty)
  | _:_:a:b -> merge(a, b) }

module binomial_heap(is_empty, insert, find_min, delete_min)
{ function is_empty(_) | [] -> true | _ -> false
  function rank(_) | r:_:_ -> r
  function root(_) | _:x:_ -> x

  function link(t1, t2)
  | [r:x1:c1, _:x2:c2] ->
    if (x1 < x2) r+1:x1:(t2:c1)
    else r+1:x2:(t1:c2)

  function ins_tree(t, ts)
  | [t, []] -> [t]
  | [t, t1:ts1] ->
    if (rank(t) < rank(t1)) t:ts
    else ins_tree(link(t, t1), ts1)

  function insert(x, ts) ins_tree(0:x:[], ts)

  function merge(ts1, ts2)
  | [_, []] -> ts1
  | [[], _] -> ts2
  | [x:xs, y:ys] ->
    if (rank(x) < rank(y)) x:merge(xs, ts2)
    else if (rank(y) < rank(x)) y:merge(ts1, ys)
    else ins_tree(link(x, y), merge(xs, ys))

  function remove_min_tree(ts)
  | [] -> core.raise('empty)
  | [t] -> t:[]
  | t:ts ->
    match(remove_min_tree(ts))
      x:xs ->
        if (root(t) < root(x)) t:ts
        else x:(t:xs)

  function find_min(ts) root(first(remove_min_tree(ts)))

  function delete_min(ts)
    match(remove_min_tree(ts))
      (_:x:ts1):ts2 -> merge(core.reverse(ts1), ts2) }
  

module red_black_set(is_member, insert)
{ function is_member(x, t)
  | [_, 'e] -> false
  | [x, #[_,a,y,b]] ->
    if (x < y) is_member(x, a)
    else if (y < x) is_member(x, b)
    else true

  function balance(color, t, z, d) 
  | ['b, #['r,#['r,a,x,b],y,c], z, d] 
  | ['b, #['r,a,x,#['r,b,y,c]], z, d] 
  | ['b, a, x, #['r,#['r,b,y,c],z,d]] 
  | ['b, a, x, #['r,b,y,#['r,c,z,d]]] -> #['r,#['b,a,x,b],y,#['b,c,z,d]]
  | _ -> #[color, t, z, d]

  function insert(x, s)
  { function ins(rs)
    | 'e -> #['r,'e,x,'e]
    | #[color,a,y,b] ->
      if (x < y) balance(color, ins(a), y, b)
      else if (y < x) balance(color, a, y, ins(b))
      else s;
     match(ins(s)) #[_,a,y,b] -> #['b,a,y,b] }}
  
// tests

let lh = leftist_heap
let h = lh.insert(10, [])
h = lh.insert(20, h)
h = lh.insert(5, h)
h = lh.insert(3, h)
h = lh.insert(30, h)
assert lh.find_min(h) == 3
h = lh.delete_min(h)
assert lh.find_min(h) == 5
h = lh.delete_min(h)
assert lh.find_min(h) == 10
h = lh.delete_min(h)
assert lh.find_min(h) == 20
h = lh.delete_min(h);
assert lh.find_min(h) == 30
h = lh.delete_min(h)
assert try lh.find_min(h) catch (e) e == 'empty

let bh = binomial_heap
h = bh.insert(10, [])
h = bh.insert(1, h)
h = bh.insert(20, h)
h = bh.insert(2, h)
assert bh.find_min(h) == 1
h = bh.delete_min(h)
assert bh.find_min(h) == 2
h = bh.delete_min(h)
assert bh.find_min(h) == 10
h = bh.delete_min(h)
assert bh.find_min(h) == 20
h = bh.delete_min(h)
assert try bh.find_min(h) catch (e) e == 'empty
assert try bh.delete_min(h) catch (e) e == 'empty

let rbs = red_black_set;
let s = rbs.insert(10, 'e);
s = rbs.insert(3, s);
s = rbs.insert(2, s);
s = rbs.insert(15, s);
assert rbs.is_member(2, s)
assert rbs.is_member(20, s) == false
assert rbs.is_member(10, s)
assert rbs.is_member(15, s)
assert rbs.is_member(3, s)
assert rbs.is_member(0, s) == false

// definitions before expressions in module
module m(a, b, c, b_x, b_set_x, d, e)
{ function a() 100
  record b(x)
  function c() 200
  let d = 300
  let e = b(x=1) }

assert m.a() == 100
assert m.c() == 200
assert m.d == 300
assert m.b_x(m.e) == 1
let dd = m.b(x = 1000)
assert m.b_x(dd) == 1000
assert m.b_set_x(dd, 2000)
assert m.b_x(dd) == 2000

// Fix for string_to_number for sign prefixed numbers.
assert string_to_number("10") == 10
assert string_to_number("+10") == 10
assert string_to_number("-10") == -10
assert string_to_number(".10") == .1
assert string_to_number("+.10") == .1
assert string_to_number("-.1012") == -.1012
assert string_to_number("+.1012") == .1012
assert string_to_number(".1012") == .1012
assert string_to_number("10e8") == 1000000000.
assert string_to_number("+10e8") == 1000000000.
assert string_to_number("-10e8") == -1000000000.
assert string_to_number("0o7") == 7
assert string_to_number("0xff") == 255
assert string_to_number("0b10") == 2
assert string_to_number("0d10") == 10
assert string_to_number("-10.2") == -10.2
assert string_to_number("+10.2") == 10.2
assert string_to_number("10.2") == 10.2
