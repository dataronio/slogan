// issue #104
let st = #(1,10,20)
assert set_length(st) == 3 && count(st) == 3
assert set_length(#()) == 0 && count(#()) == 0

assert st == set(st)
st = #(1,2,3)
let xs = [1,2,3]
assert set(xs) == st
assert sort(set_to_list(st)) == xs
xs = #{1:2, 3:4}
assert set(xs) == #(1:2, 3:4)
xs = #[1,2,3]
assert set(xs) == st
xs = "hello"
assert set(xs) == #(\e,\o,\l,\h)

// issue #105
function make_bag(xs)
  let (len = array_length(xs))
    ^(msg)
    | 'first -> when (len > 0) array_at(xs, 0)
    | 'rest -> when (len > 1) make_bag(subarray(xs, 1, len))

assert nth(3, map(sqrt, make_bag(#[1,2,3,4,5]))) == 2
assert nth(2, map(sqrt, make_bag(#[1,2,3,4,5]))) == 1.7320508075688772

let fs = 2.23606797749979

assert nth(4, map(sqrt, make_bag(#[1,2,3,4,5]))) == fs
assert nth(4, map(sqrt, [1,2,3,4,5])) == fs

function ints(i, x = 5) if (i > x) false else i:~ints(inc(i), x)

assert nth(4, map(sqrt, ints(1))) == fs

function iints(i, x = 5) let loop (i = i) if (i > x) false else { yield i; loop(inc(i)) }

assert nth(4, map(sqrt, iints(1))) == fs

let ssum = 0
let esum = 15
for_each(^(n) ssum = ssum + n, [1,2,3,4,5])
assert ssum == esum
ssum = 0;
for_each(^(n) ssum = ssum + n, make_bag(#[1,2,3,4,5]))
assert ssum == esum
ssum = 0
for_each(^(n) ssum = ssum + n, ints(1))
assert ssum == esum
ssum = 0
for_each(^(n) ssum = ssum + n, iints(1))
assert ssum == esum

ssum = map(`+`, [1,2,3], [4,5,6])
assert nth(1, ssum) == 7
assert nth(2, ssum) == 9
ssum = map(`+`, make_bag(#[1,2,3]), make_bag(#[4,5,6]))
assert nth(1, ssum) == 7
assert nth(2, ssum) == 9
ssum = map(`+`, ints(1,3), ints(4,6))
assert nth(1, ssum) == 7
assert nth(2, ssum) == 9
ssum = map(`+`, iints(1,3), iints(4,6))
assert first(ssum) == 5
ssum = rest(ssum)
assert first(ssum) == 7
ssum = rest(ssum)
assert nth(0, ssum) == 9
assert rest(ssum) == false