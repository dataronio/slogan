// issue #104
let st = #(1,10,20)
assert set_length(st) == 3 && core.count(st) == 3
assert set_length(#()) == 0 && core.count(#()) == 0

assert st == core.set(st)
st = #(1,2,3)
let xs = [1,2,3]
assert core.set(xs) == st
assert sort(set_to_list(st)) == xs
xs = #{1:2, 3:4}
assert core.set(xs) == #(1:2, 3:4)
xs = #[1,2,3]
assert core.set(xs) == st
xs = "hello"
assert core.set(xs) == #(\e,\o,\l,\h)

// issue #105, #106, #107
function make_bag(xs)
  let (len = array_length(xs)
       bag_ref = ^(i) xs[i]
       bag_set = ^(i, v) xs[i] = v)
    ^(msg)
    | 'first -> when (len > 0) array_at(xs, 0)
    | 'rest -> when (len > 1) make_bag(subarray(xs, 1, len))
    | 'count -> len
    | 'ref -> bag_ref
    | 'ref_set -> bag_set
    
assert core.nth(3, core.map(sqrt, make_bag(#[1,2,3,4,5]))) == 2
assert core.nth(2, core.map(sqrt, make_bag(#[1,2,3,4,5]))) == 1.7320508075688772

let fs = 2.23606797749979

assert core.nth(4, core.map(sqrt, make_bag(#[1,2,3,4,5]))) == fs
assert core.nth(4, core.map(sqrt, [1,2,3,4,5])) == fs

function ints(i, x = 5) if (i > x) false else i:~ints(inc(i), x)

assert core.nth(4, core.map(sqrt, ints(1))) == fs

function iints(i, x = 5) let loop (i = i) if (i > x) false else { yield i; loop(inc(i)) }

assert core.nth(4, core.map(sqrt, iints(1))) == fs

let ssum = 0
let esum = 15
for_each(^(n) ssum = ssum + n, [1,2,3,4,5])
assert ssum == esum
ssum = 0;
for_each(^(n) ssum = ssum + n, make_bag(#[1,2,3,4,5]))
assert ssum == esum
ssum = 0
for_each(^(n) ssum = ssum + n, ints(1))
assert ssum == esum
ssum = 0
for_each(^(n) ssum = ssum + n, iints(1))
assert ssum == esum

ssum = core.map(`+`, [1,2,3], [4,5,6])
assert core.nth(1, ssum) == 7
assert core.nth(2, ssum) == 9
ssum = core.map(`+`, make_bag(#[1,2,3]), make_bag(#[4,5,6]))
assert core.nth(1, ssum) == 7
assert core.nth(2, ssum) == 9
ssum = core.map(`+`, ints(1,3), ints(4,6))
assert core.nth(1, ssum) == 7
assert core.nth(2, ssum) == 9
ssum = core.map(`+`, iints(1,3), iints(4,6))
assert core.first(ssum) == 5
ssum = core.rest(ssum)
assert core.first(ssum) == 7
ssum = core.rest(ssum)
assert core.nth(0, ssum) == 9
assert core.rest(ssum) == false

let xs = [1,2,3,4,10]
assert core.count(xs) == core.length(xs)
xs = #(2,2,3)
assert core.count(xs) == 2
xs = #[10,20,30]
assert core.count(xs) == array_length(xs)
xs = make_bag(xs)
assert core.count(xs) == 3
xs = make_bag(#[])
assert core.count(xs) == 0

function assert_refs(xs)
{ assert core.ref(xs, 1) == 20
  assert core.ref(xs, 0) == xs[0]
  core.ref_set(xs, 1, 100)
  assert core.ref(xs, 1) == 100
  xs[2] = 200
  assert xs[2] == 200 }
  
assert_refs([10, 20, 30])
assert_refs(#[10, 20, 30])
assert_refs(#u32[10, 20, 30])
assert_refs(#{1:20, 0:10, 2:30})
assert_refs(make_bag(#[10, 20, 30]))

// issue #108
assert core.to_string(100) == "100"
assert core.to_string([1,2,3]) == "[1, 2, 3]"
assert core.to_string(#(1,2,3)) == "#(1, 2, 3)"
assert core.to_string(#{1:2, 3:4}) == "#{1: 2, 3: 4}"

function make_employee(name, salary)
  let (str = ^()
             let (s = string_writer())
             { show(stream = s, "name: ", name, ", salary: ", salary)
               get_output_string(s) })
    ^(msg)
    case (msg)
      name -> name
    | salary -> salary
    | to_string -> str
    | is_equal -> ^(e) name == e.name && salary == e.salary

let e1, e2 = make_employee("sam", 1000), make_employee("sally", 1340)
assert e1.name == "sam"
assert e2.salary == 1340
assert core.to_string(e1) == "name: sam, salary: 1000"
assert core.to_string(e2) == "name: sally, salary: 1340"
assert e1 <> e2
let e3 = make_employee(e1.name, e1.salary)
assert e1 == e3
assert core.not(e1 <> e3)

// issue #109
let xs = #[1,100,200,300]
assert array_at(xs, 2) == 200
array_set(xs, 1, 300)
assert array_at(xs, 1) == 300
assert array_ref(xs, 2) == array_at(xs, 2)
array_ref_set(xs, 2, 100)
assert array_ref(xs, 2) == 100
xs = #[#[1,2], #[3,4]]
assert array_ref(xs, [0, 1]) == 2
array_ref_set(xs, [1, 1], 20)
assert array_ref(xs, [1,1]) == 20