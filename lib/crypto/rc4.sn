/**
 * RC4 stream cipher.
 * See the README file for sample usage.
 * Copyright (c) 2013-2015 by Vijay Mathew Pandyalakal, All Rights Reserved.
 **/

namespace rc4;

function combksched(s, key, klen) 
    let loop (i = 0, j = 0)
        if (i < 256) 
            letseq (a = u8array_at(s, i)
                    j = mod(j + a + char_to_integer(string_at(key, mod(0, klen))), 256)) {
                u8array_set(s, i, u8array_at(s, j));
                u8array_set(s, j, a);
                loop(inc(i), j)
            };

function encdec(p, plen, s, out) 
    let loop (i = 0, j = 0, c = 0, plen = plen) 
        if (plen > 0) {
            i = mod(i + 1, 256);
            let (tmp = u8array_at(s, i)) {
                j = mod(j + tmp, 256);
                u8array_set(s, i, u8array_at(s, j));
                u8array_set(s, j, tmp);
                u8array_set(out, c, bitwise_xor(u8array_at(s, mod(u8array_at(s, i) + u8array_at(s, j), 256)),
                                                u8array_at(p, c)));
                loop(i, j, inc(c), dec(plen))
            }
        };

function opr(in, key) 
    let (s = list_to_u8array(range(0, 255))
         klen = string_length(key)
         plen = u8array_length(in)) 
        let (out = make_u8array(plen)) {
            combksched(s, key, klen);
            encdec(in, plen, s, out);
            out
        };

namespace;