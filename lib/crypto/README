Disclaimer: This library is not battle-tested. Use at your own risk.

The Crypto library implements various symmetric and public-key cryptographic algorithms.
The core algorithms are implemented in C and is based on the code from "Implementing SSL / TLS Using Cryptography and PKI" by Joshua Davies.
(See: http://as.wiley.com/WileyCDA/WileyTitle/productCd-0470920416.html).
In the long-term the `crypto` library should move to a robust backend like OpenSSL.

Building the library
====================

Export the environment variable `SLOGAN_ROOT` to point to the Slogan parent directory.
Build the shared library by running the `build` script in this folder.

Load and initialize the crypto-library
======================================

```
load "$SLOGAN_ROOT/lib/crypto/crypto";

// Do crypto-stuff here

```

Symmetric-key algorithms
========================

DES
---

```
load "$SLOGAN_ROOT/lib/crypto/des";
import crypto_des as des;

define key = u8array_to_string(random_byte_array(8));
define iv = u8array_to_string(random_byte_array(8));
define e = des_encrypt(key, iv, string_to_u8array("abcdefgh"));
define d = des_decrypt(key, iv, e);
u8array_to_string(d); // => "abcdefgh"

// A 24 byte key will perform 3DES encryption:
key = u8array_to_string(random_byte_array(24));
define e = des_encrypt(key, iv, string_to_u8array("abcdefgh"));
define d = des_decrypt(key, iv, e);
u8array_to_string(d); // => "abcdefgh"
```


AES
---

```
load "$SLOGAN_ROOT/lib/crypto/aes";
import crypto_aes as aes;

define key = u8array_to_string(random_byte_array(24));
define iv = u8array_to_string(random_byte_array(8));
define e = aes_encrypt(key, iv, string_to_u8array("abcdefghabcdefgh"));
define d = aes_decrypt(key, iv, e);
u8array_to_string(d); // => "abcdefghabcdefgh"

// A 32 byte key will perform AES-256 encryption:
key = u8array_to_string(random_byte_array(32));
define e = aes_encrypt(key, iv, string_to_u8array("abcdefghabcdefgh"));
define d = aes_decrypt(key, iv, e);
u8array_to_string(d); // => "abcdefghabcdefgh"
```

RC4
---

```
load "$SLOGAN_ROOT/lib/crypto/rc4";
import crypto_rc4 as rc4;

define a = rc4_encrypt_40("password", string_to_u8array("hello"));
u8array_to_string(rc4_decrypt_40("password", a)); // => "hello"
define a = rc4_encrypt_128("password", string_to_u8array("hello"));
u8array_to_string(rc4_decrypt_128("password", a)); // => "hello"
```

RSA
---

```
load "$SLOGAN_ROOT/lib/crypto/rsa";
import crypto_rsa as rsa;

define modulus = #u8[0xC4, 0xF8, 0xE9, 0xE1, 0x5D, 0xCA, 0xDF, 0x2B,
                     0x96, 0xC7, 0x63, 0xD9, 0x81, 0x00, 0x6A, 0x64,
                     0x4F, 0xFB, 0x44, 0x15, 0x03, 0x0A, 0x16, 0xED,
                     0x12, 0x83, 0x88, 0x33, 0x40, 0xF2, 0xAA, 0x0E,
                     0x2B, 0xE2, 0xBE, 0x8F, 0xA6, 0x01, 0x50, 0xB9,
                     0x04, 0x69, 0x65, 0x83, 0x7C, 0x3E, 0x7D, 0x15,
                     0x1B, 0x7D, 0xE2, 0x37, 0xEB, 0xB9, 0x57, 0xC2,
                     0x06, 0x63, 0x89, 0x82, 0x50, 0x70, 0x3B, 0x3F];
                     
define privatekey = #u8[0x8a, 0x7e, 0x79, 0xf3, 0xfb, 0xfe, 0xa8, 0xeb,
                        0xfd, 0x18, 0x35, 0x1c, 0xb9, 0x97, 0x91, 0x36,
                        0xf7, 0x05, 0xb4, 0xd9, 0x11, 0x4a, 0x06, 0xd4,
                        0xaa, 0x2f, 0xd1, 0x94, 0x38, 0x16, 0x67, 0x7a,
                        0x53, 0x74, 0x66, 0x18, 0x46, 0xa3, 0x0c, 0x45,
                        0xb3, 0x0a, 0x02, 0x4b, 0x4d, 0x22, 0xb1, 0x5a,
                        0xb3, 0x23, 0x62, 0x2b, 0x2d, 0xe4, 0x7b, 0xa2,
                        0x91, 0x15, 0xf0, 0x6e, 0xe4, 0x2c, 0x41];
                        
define publickey = #u8[0x01, 0x00, 0x01];

function mkkey(m, k) (u8array_length(m) : m) : (u8array_length(k) : k);

define e = rsa_encrypt(mkkey(modulus, publickey), string_to_u8array("abc"));
define d = rsa_decrypt(mkkey(modulus, privatekey), e);
u8array_to_string(d); // "abc"
```
