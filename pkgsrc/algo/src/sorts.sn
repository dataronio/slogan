// Old-school sorting algorithms.
namespace sorts
{ function exch(a, i, j)
    letfn (t = a[i])
    { a[i] = a[j]
      a[j] = t }

  function is_sorted(xs)
    letfn (c = count(xs))
      letfn loop(i = 1, res = true)
        if (i < c && res)
         if (xs[i] < xs[i-1])
           loop(i, false)
         else
           loop(i + 1, res)
        else res

   // Optimized versions for arrays.
   function arr_exch(a, i, j)
     letfn (t = array_at(a, i))
     { array_set(a, i, array_at(a, j))
       array_set(a, j, t) }

   function arr_is_sorted(xs)
     letfn (c = array_length(xs))
       letfn loop(i = 1, res = true)
         if (i < c && res)
          if (array_at(i) < array_at(i-1))
            loop(i, false)
          else
            loop(i + 1, res)
         else res

   function less(a, b) a < b
   
  module selection(make, seq_sort, array_sort)
  { function make(@key len = count, exchange = exch, compare = less)
      ^(xs)
      letfn (n = len(xs))
        for (i = 0; number_is_lt(i, n); i+1)
          letfn (min = i)
          { for (j = i+1; number_is_lt(j, n); j+1)
              when (compare(xs[j], xs[min])) min = j
            exchange(xs, i, min) }

     let seq_sort = make()
     let array_sort = make(len = array_length, exchange = arr_exch) }

  module insertion(make, seq_sort, array_sort)
  { function make(@key len = count, exchange = exch, compare = less)
      ^(xs)
      letfn (n = len(xs))
        for (i = 1; i < n; i + 1)
          for (j = i; j > 0 && compare(xs[j], xs[j-1]); j-1)
            exchange(xs, j, j-1)

     let seq_sort = make()
     let array_sort = make(len = array_length, exchange = arr_exch) }

  module shell(make, seq_sort, array_sort)
  { function make(@key len = count, exchange = exch, compare = less)
      ^(xs)
      letfn (n = len(xs))
        for (h = calc_subseq_len(n, 1); h >= 1; quotient(h, 3))
          for (i = h; i < n; i + 1)
            for (j = i; j >= h && compare(xs[j], xs[j-h]); j - h)
              exchange(xs, j, j - h)

    function calc_subseq_len(n, h)
      if (h < n/3) calc_subseq_len(n, 3*h + 1)
      else h
      
    let seq_sort = make()
    let array_sort = make(len = array_length, exchange = arr_exch) }

  module merge(make, seq_sort, array_sort)
  { function do_merge(xs, lo, mid, hi, len, compare)
      let (aux = make_array(len(xs)),
           aset = ^(i, x) array_set(aux, i, x), 
           aref = ^(i) array_at(aux, i))
      { for (k = lo; k <= hi; k+1)
          aset(k, xs[k])

        for (i = lo, j = mid + 1, k = lo; k <= hi; k+1)
          if      (i > mid)                 { xs[k] = aref(j); j = j + 1 }
          else if (j > hi)                  { xs[k] = aref(i); i = i + 1 }
          else if (compare(aux[j], aux[i])) { xs[k] = aref(j); j = j + 1 }
          else                              { xs[k] = aref(i); i = i + 1 } }

     function merge_sort(xs, lo, hi, len, compare)
       when (not(hi <= lo))
         let (mid = lo + quotient(hi - lo, 2))
         { merge_sort(xs, lo, mid, len, compare)
           merge_sort(xs, mid+1, hi, len, compare)
           do_merge(xs, lo, mid, hi, len, compare) }
            
     function make(@key len = count, compare = less)
       ^(xs) merge_sort(xs, 0, len(xs) - 1, len, compare)

     let seq_sort = make()
     let array_sort = make(len = array_length) }

  module quick(make, seq_sort, array_sort, select)
  { function quick_sort(xs, lo, hi, lt, exchange)
    { when (hi > lo)
        letfn (j = partition(xs, lo, hi, lt, exchange))
        { quick_sort(xs, lo, j-1, lt, exchange)
          quick_sort(xs, j+1, hi, lt, exchange) }
      void() }

    function partition(xs, lo, hi, lt, exchange)
      letfn (i = lo, j = hi+1, v = xs[lo])
      { letfn loop ()
        { letfn iloop () { i = i + 1; when (lt(xs[i], v)) when (i <> hi) iloop() }
          letfn iloop () { j = j - 1; when (lt(v, xs[j])) when (j <> lo) iloop() }
          when (not(i >= j)) exchange(xs, i, j) }
        exchange(xs, lo, j)
        j }

    function select(xs, k, @key len = count, compare = less, exchange = exch)
      letfn loop (lo = 0, hi = len(xs)-1)
        if (hi <= lo)
          xs[k]
        else
          let (j = partition(xs, lo, hi, compare, exchange))
            if (j == k) xs[k]
            else if (j > k) loop(lo, j-1)
            else if (j < k) loop(j+1, hi)
            
    function make(@key len = count, compare = less, exchange = exch)
      ^(xs) quick_sort(xs, 0, len(xs) - 1, compare, exchange)

    let seq_sort = make()
    let array_sort = make(len = array_length, exchange = arr_exch) }

  module key_indexed_counting(seq_sort)
  { function seq_sort(xs, R)
      let (n = count(xs), count = make_array(n+1, 0),
           aux = make_array(n))
      { for (i = 0; i < n; i+1)
          let (k = xs[i].key + 1)
            array_set(count, k, array_at(count, k) + 1)

        for (r = 0; r < R; r+1)
          array_set(count, r+1, array_at(count, r+1) + array_at(count, r))

        for (i = 0; i < n; i+1)
          let (a = xs[i],
               j = array_at(count, a.key))
          { array_set(count, a.key, j+1)
            array_set(aux, j, a) }

        for (i = 0; i < n; i+1)
          xs[i] = array_at(aux, i) } }

  function ichar_at(s, index)
    char_to_integer(string_at(s, index))
    
  module lsd(make)
  { function make(R = 256)
      ^(ss, W)
        let (n = count(ss), aux = make_array(n, ""))
          for (d = W-1; d >= 0; d-1)
            let (count = make_array(R+1, 0))
            { for (i = 0; i < n; i+1)
                let (c = ichar_at(ss[i], d) + 1)
                  array_set(count, c, array_at(count, c) + 1)
              for (r = 0; r < R; r+1)
                array_set(count, r+1, array_at(count, r+1) + array_at(count, r))
              for (i = 0; i < n; i+1)
                let (c = ichar_at(ss[i], d), k = array_at(count, c))
                { array_set(aux, k, ss[i])
                  array_set(count, c, k+1) }
              for (i = 0; i < n; i+1)
                array_set(ss, i, array_at(aux, i)) } } }
          